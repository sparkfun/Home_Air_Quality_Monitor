//
// hV_Screen_Buffer.cpp
// Class library C++ code
// ----------------------------------
//
// Project Pervasive Displays Library Suite
// Based on highView technology
//
// Created by Rei Vilo, 28 Jun 2016
//
// Copyright (c) Rei Vilo, 2010-2023
// Licence Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
//
// See hV_Screen_Buffer.h for references
//
// Release 520: Added use of hV_HAL_Peripherals
// Release 523: Fixed rounded rectangles
// Release 526: Improved touch management
// Release 700: Refactored screen and board functions
//

// Library header
#include "hV_Screen_Buffer.h"
//#include "QuickDebug.h"

// Code
hV_Screen_Buffer::hV_Screen_Buffer()
{
    f_fontSize = 0;
    f_fontNumber = 0;
    f_fontSolid = true;
    f_fontSpaceX = 1;
    _penSolid = false;
}

void hV_Screen_Buffer::begin()
{
    f_begin(); // hV_font_...
}

void hV_Screen_Buffer::clear(uint16_t colour)
{
    uint8_t oldOrientation = _orientation;
    bool oldPenSolid = _penSolid;
    setOrientation(0);
    setPenSolid();
    rectangle(0, 0, screenSizeX() - 1, screenSizeY() - 1, colour);
    setOrientation(oldOrientation);
    setPenSolid(oldPenSolid);
}

void hV_Screen_Buffer::flush()
{
    ;
}

void hV_Screen_Buffer::setOrientation(uint8_t orientation)
{
    switch (orientation)
    {
        case 6:

            _orientation = 0;
            _setOrientation(_orientation);
            if (screenSizeX() > screenSizeY())
            {
                _orientation = 1;
                _setOrientation(_orientation);
            }
            break;

        case 7:

            _orientation = 0;
            _setOrientation(_orientation);
            if (screenSizeX() < screenSizeY())
            {
                _orientation = 1;
                _setOrientation(_orientation);
            }
            break;

        default:

            _orientation = orientation % 4;
            _setOrientation(_orientation);
            break;
    }
}

uint8_t hV_Screen_Buffer::getOrientation()
{
    return _orientation;
}

uint16_t hV_Screen_Buffer::screenSizeX()
{
    switch (_orientation)
    {
        case 1:
        case 3:

            return _screenSizeV; // _maxX
            break;

        // case 0:
        // case 2:
        default:

            return _screenSizeH; // _maxX
            break;
    }
    return 0;
}

uint16_t hV_Screen_Buffer::screenSizeY()
{
    switch (_orientation)
    {
        case 1:
        case 3:

            return _screenSizeH; // _maxY
            break;

        // case 0:
        // case 2:
        default:

            return _screenSizeV; // _maxY
            break;
    }
    return 0;
}

uint16_t hV_Screen_Buffer::screenDiagonal()
{
    return _screenDiagonal;
}

uint8_t hV_Screen_Buffer::screenColourBits()
{
    return _screenColourBits;
}

void hV_Screen_Buffer::circle(uint16_t x0, uint16_t y0, uint16_t radius, uint16_t colour)
{
    int16_t f = 1 - radius;
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * radius;
    int16_t x = 0;
    int16_t y = radius;

    if (_penSolid == false)
    {
        point(x0, y0 + radius, colour);
        point(x0, y0 - radius, colour);
        point(x0 + radius, y0, colour);
        point(x0 - radius, y0, colour);

        while (x < y)
        {
            if (f >= 0)
            {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }

            x++;
            ddF_x += 2;
            f += ddF_x;

            point(x0 + x, y0 + y, colour);
            point(x0 - x, y0 + y, colour);
            point(x0 + x, y0 - y, colour);
            point(x0 - x, y0 - y, colour);
            point(x0 + y, y0 + x, colour);
            point(x0 - y, y0 + x, colour);
            point(x0 + y, y0 - x, colour);
            point(x0 - y, y0 - x, colour);
        }
    }
    else
    {
        while (x < y)
        {
            if (f >= 0)
            {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }

            x++;
            ddF_x += 2;
            f += ddF_x;

            line(x0 + x, y0 + y, x0 - x, y0 + y, colour); // bottom
            line(x0 + x, y0 - y, x0 - x, y0 - y, colour); // top
            line(x0 + y, y0 - x, x0 + y, y0 + x, colour); // right
            line(x0 - y, y0 - x, x0 - y, y0 + x, colour); // left
        }

        setPenSolid(true);
        rectangle(x0 - x, y0 - y, x0 + x, y0 + y, colour);
    }
}

void hV_Screen_Buffer::dLine(uint16_t x0, uint16_t y0, uint16_t dx, uint16_t dy, uint16_t colour)
{
    line(x0, y0, x0 + dx - 1, y0 + dy - 1, colour);
}

void hV_Screen_Buffer::line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t colour)
{
    if ((x1 == x2) and (y1 == y2))
    {
        _setPoint(x1, y1, colour);
    }
    else if (x1 == x2)
    {
        if (y1 > y2)
        {
            swap(y1, y2);
        }
        for (uint16_t y = y1; y <= y2; y++)
        {
            _setPoint(x1, y, colour);
        }
    }
    else if (y1 == y2)
    {
        if (x1 > x2)
        {
            swap(x1, x2);
        }
        for (uint16_t x = x1; x <= x2; x++)
        {
            _setPoint(x, y1, colour);
        }
    }
    else
    {
        int16_t wx1 = (int16_t)x1;
        int16_t wx2 = (int16_t)x2;
        int16_t wy1 = (int16_t)y1;
        int16_t wy2 = (int16_t)y2;

        bool flag = abs(wy2 - wy1) > abs(wx2 - wx1);
        if (flag)
        {
            swap(wx1, wy1);
            swap(wx2, wy2);
        }

        if (wx1 > wx2)
        {
            swap(wx1, wx2);
            swap(wy1, wy2);
        }

        int16_t dx = wx2 - wx1;
        int16_t dy = abs(wy2 - wy1);
        int16_t err = dx / 2;
        int16_t ystep;

        if (wy1 < wy2)
        {
            ystep = 1;
        }
        else
        {
            ystep = -1;
        }

        for (; wx1 <= wx2; wx1++)
        {
            if (flag)
            {
                _setPoint(wy1, wx1, colour);
            }
            else
            {
                _setPoint(wx1, wy1, colour);
            }

            err -= dy;
            if (err < 0)
            {
                wy1 += ystep;
                err += dx;
            }
        }
    }
}

void hV_Screen_Buffer::setPenSolid(bool flag)
{
    _penSolid = flag;
}

void hV_Screen_Buffer::point(uint16_t x1, uint16_t y1, uint16_t colour)
{
    _setPoint(x1, y1, colour);
}

void hV_Screen_Buffer::rectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t colour)
{
    if (_penSolid == false)
    {
        line(x1, y1, x1, y2, colour);
        line(x1, y1, x2, y1, colour);
        line(x1, y2, x2, y2, colour);
        line(x2, y1, x2, y2, colour);
    }
    else
    {
        if (x1 > x2)
        {
            swap(x1, x2);
        }
        if (y1 > y2)
        {
            swap(y1, y2);
        }
        for (uint16_t x = x1; x <= x2; x++)
        {
            for (uint16_t y = y1; y <= y2; y++)
            {
                _setPoint(x, y, colour);
            }
        }
    }
}

void hV_Screen_Buffer::dRectangle(uint16_t x0, uint16_t y0, uint16_t dx, uint16_t dy, uint16_t colour)
{
    rectangle(x0, y0, x0 + dx - 1, y0 + dy - 1, colour);
}

void hV_Screen_Buffer::_triangleArea(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t colour)
{
    int16_t wx1 = (int16_t)x1;
    int16_t wy1 = (int16_t)y1;
    int16_t wx2 = (int16_t)x2;
    int16_t wy2 = (int16_t)y2;
    int16_t wx3 = (int16_t)x3;
    int16_t wy3 = (int16_t)y3;
    int16_t wx4 = wx1;
    int16_t wy4 = wy1;
    int16_t wx5 = wx1;
    int16_t wy5 = wy1;

    bool changed1 = false;
    bool changed2 = false;

    int16_t dx1 = abs(wx2 - wx1);
    int16_t dy1 = abs(wy2 - wy1);

    int16_t dx2 = abs(wx3 - wx1);
    int16_t dy2 = abs(wy3 - wy1);

    int16_t signx1 = (wx2 >= wx1) ? +1 : -1;
    int16_t signx2 = (wx3 >= wx1) ? +1 : -1;

    int16_t signy1 = (wy2 >= wy1) ? +1 : -1;
    int16_t signy2 = (wy3 >= wy1) ? +1 : -1;

    if (dy1 > dx1)
    {
        swap(dx1, dy1); // swap values
        changed1 = true;
    }

    if (dy2 > dx2)
    {
        swap(dx2, dy2); // swap values
        changed2 = true;
    }

    int16_t e1 = 2 * dy1 - dx1;
    int16_t e2 = 2 * dy2 - dx2;

    for (int i = 0; i <= dx1; i++)
    {
        line(wx4, wy4, wx5, wy5, colour);

        while (e1 >= 0)
        {
            if (changed1)
            {
                wx4 += signx1;
            }
            else
            {
                wy4 += signy1;
            }
            e1 = e1 - 2 * dx1;
        }

        if (changed1)
        {
            wy4 += signy1;
        }
        else
        {
            wx4 += signx1;
        }

        e1 = e1 + 2 * dy1;

        while (wy5 != wy4)
        {
            while (e2 >= 0)
            {
                if (changed2)
                {
                    wx5 += signx2;
                }
                else
                {
                    wy5 += signy2;
                }
                e2 = e2 - 2 * dx2;
            }

            if (changed2)
            {
                wy5 += signy2;
            }
            else
            {
                wx5 += signx2;
            }

            e2 = e2 + 2 * dy2;
        }
    }
}

void hV_Screen_Buffer::triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t colour)
{
    if ((x1 == x2) and (y1 == y2))
    {
        line(x3, y3, x1, y1, colour);
    }
    else if ((x1 == x3) and (y1 == y3))
    {
        line(x2, y2, x3, y3, colour);
    }
    else if ((x2 == x3) and (y2 == y3))
    {
        line(x1, y1, x2, y2, colour);
    }
    else if (_penSolid)
    {
        bool b = true;

        // Graham Scan + Andrew's Monotone Chain Algorithm
        // Sort by ascending y
        while (b)
        {
            b = false;
            if ((b == false) and (y1 > y2))
            {
                swap(x1, x2);
                swap(y1, y2);
                b = true;
            }
            if ((b == false) and (y2 > y3))
            {
                swap(x3, x2);
                swap(y3, y2);
                b = true;
            }
        }

        if (y2 == y3)
        {
            _triangleArea(x1, y1, x2, y2, x3, y3, colour);
        }
        else if (y1 == y2)
        {
            _triangleArea(x3, y3, x1, y1, x2, y2, colour);
        }
        else
        {
            uint16_t x4 = (uint16_t)((int32_t)x1 + (y2 - y1) * (x3 - x1) / (y3 - y1));
            uint16_t y4 = y2;

            _triangleArea(x1, y1, x2, y2, x4, y4, colour);
#if defined(ESP8266)
            delay(1);
#else
            delayMicroseconds(1000); // delay(1);
#endif // ESP8266
            delayMicroseconds(1000); // delay(1);
            _triangleArea(x3, y3, x2, y2, x4, y4, colour);
#if defined(ESP8266)
            delay(1);
#else
            delayMicroseconds(1000); // delay(1);
#endif // ESP8266
        }
    }
    else
    {
        line(x1, y1, x2, y2, colour);
        line(x2, y2, x3, y3, colour);
        line(x3, y3, x1, y1, colour);
    }
}

// Font functions
void hV_Screen_Buffer::setFontSolid(bool flag)
{
    f_setFontSolid(flag);
}

uint8_t hV_Screen_Buffer::addFont(font_s fontName)
{
    return f_addFont(fontName);
}

void hV_Screen_Buffer::selectFont(uint8_t font)
{
    f_selectFont(font);
}

uint8_t hV_Screen_Buffer::getFont()
{
    return f_fontSize;
}

uint8_t hV_Screen_Buffer::fontMax()
{
    return f_fontMax();
}

uint16_t hV_Screen_Buffer::characterSizeX(uint8_t character)
{
    uint16_t result = 0;
    if ((f_font.kind & 0x40) == 0x40) // Monospaced font
    {
        result = f_font.maxWidth + f_fontSpaceX;
    }
    else
    {
        result = f_characterSizeX(character);
    }

    return result;
}

uint16_t hV_Screen_Buffer::characterSizeY()
{
    return f_characterSizeY();
}

uint16_t hV_Screen_Buffer::stringSizeX(String text)
{
    return f_stringSizeX(text);
}

uint8_t hV_Screen_Buffer::stringLengthToFitX(String text, uint16_t pixels)
{
    return f_stringLengthToFitX(text, pixels);
}

void hV_Screen_Buffer::setFontSpaceX(uint8_t number)
{
    f_setFontSpaceX(number);
}

void hV_Screen_Buffer::setFontSpaceY(uint8_t number)
{
    f_setFontSpaceY(number);
}

uint8_t hV_Screen_Buffer::_getCharacter(uint8_t character, uint8_t index)
{
    return f_getCharacter(character, index);
}

void hV_Screen_Buffer::drawDigitBig(uint8_t number, uint16_t x_location, uint16_t y_location) 
{
    //bitmaps
    uint8_t numbers[10][200] =
    {
        {
            0xff,0xfe,0x7f,0xff, // 1
            0xff,0xe0,0x07,0xff, // 2
            0xff,0x80,0x03,0xff, // 3
            0xff,0x00,0x00,0xff, // 4
            0xfe,0x00,0x00,0x7f, // 5
            0xfc,0x07,0xc0,0x3f, // 6
            0xf8,0x0f,0xf0,0x3f, // 7
            0xf8,0x1f,0xf8,0x1f, // 8
            0xf0,0x3f,0xfc,0x1f, // 9
            0xf0,0x7f,0xfc,0x0f, // 10
            0xe0,0x7f,0xfe,0x0f, // 11
            0xe0,0xff,0xff,0x07, // 12
            0xc0,0xff,0xff,0x07, // 13
            0xc1,0xff,0xff,0x07, // 14
            0xc1,0xff,0xff,0x83, // 15
            0x81,0xff,0xff,0x83, // 16
            0x83,0xff,0xff,0x83, // 17
            0x83,0xff,0xff,0x83, // 18
            0x83,0xff,0xff,0x81, // 19
            0x83,0xff,0xff,0xc1, // 20
            0x83,0xff,0xff,0xc1, // 21
            0x03,0xff,0xff,0xc1, // 22
            0x03,0xff,0xff,0xc1, // 23
            0x07,0xff,0xff,0xc1, // 24
            0x07,0xff,0xff,0xc1, // 25
            0x07,0xff,0xff,0xc1, // 26
            0x07,0xff,0xff,0xc1, // 27
            0x03,0xff,0xff,0xc1, // 28
            0x03,0xff,0xff,0xc1, // 29
            0x03,0xff,0xff,0xc1, // 30
            0x83,0xff,0xff,0xc1, // 31
            0x83,0xff,0xff,0xc1, // 32
            0x83,0xff,0xff,0x83, // 33
            0x83,0xff,0xff,0x83, // 34
            0x83,0xff,0xff,0x83, // 35
            0xc1,0xff,0xff,0x83, // 36
            0xc1,0xff,0xff,0x03, // 37
            0xc1,0xff,0xff,0x07, // 38
            0xe0,0xff,0xff,0x07, // 39
            0xe0,0xff,0xfe,0x07, // 40
            0xe0,0x7f,0xfe,0x0f, // 41
            0xf0,0x7f,0xfc,0x0f, // 42
            0xf0,0x3f,0xf8,0x1f, // 43
            0xf8,0x1f,0xf0,0x3f, // 44
            0xfc,0x0f,0xe0,0x3f, // 45
            0xfc,0x00,0x00,0x7f, // 46
            0xfe,0x00,0x00,0xff, // 47
            0xff,0x00,0x01,0xff, // 48
            0xff,0xc0,0x07,0xff, // 49
            0xff,0xf8,0x1f,0xff, // 50
        },
        {
            0xff,0xff,0xff,0xff, // 1
            0xff,0xff,0xff,0xff, // 2
            0xff,0xff,0x87,0xff, // 3
            0xff,0xff,0x07,0xff, // 4
            0xff,0xfe,0x07,0xff, // 5
            0xff,0xfe,0x07,0xff, // 6
            0xff,0xfc,0x07,0xff, // 7
            0xff,0xf8,0x07,0xff, // 8
            0xff,0xf0,0x07,0xff, // 9
            0xff,0xe0,0x07,0xff, // 10
            0xff,0xff,0x07,0xff, // 11
            0xff,0xff,0x07,0xff, // 12
            0xff,0xff,0x07,0xff, // 13
            0xff,0xff,0x07,0xff, // 14
            0xff,0xff,0x07,0xff, // 15
            0xff,0xff,0x07,0xff, // 16
            0xff,0xff,0x07,0xff, // 17
            0xff,0xff,0x07,0xff, // 18
            0xff,0xff,0x07,0xff, // 19
            0xff,0xff,0x07,0xff, // 20
            0xff,0xff,0x07,0xff, // 21
            0xff,0xff,0x07,0xff, // 22
            0xff,0xff,0x07,0xff, // 23
            0xff,0xff,0x07,0xff, // 24
            0xff,0xff,0x07,0xff, // 25
            0xff,0xff,0x07,0xff, // 26
            0xff,0xff,0x07,0xff, // 27
            0xff,0xff,0x07,0xff, // 28
            0xff,0xff,0x07,0xff, // 29
            0xff,0xff,0x07,0xff, // 30
            0xff,0xff,0x07,0xff, // 31
            0xff,0xff,0x07,0xff, // 32
            0xff,0xff,0x07,0xff, // 33
            0xff,0xff,0x07,0xff, // 34
            0xff,0xff,0x07,0xff, // 35
            0xff,0xff,0x07,0xff, // 36
            0xff,0xff,0x07,0xff, // 37
            0xff,0xff,0x07,0xff, // 38
            0xff,0xff,0x07,0xff, // 39
            0xff,0xff,0x07,0xff, // 40
            0xff,0xff,0x07,0xff, // 41
            0xff,0xff,0x07,0xff, // 42
            0xff,0xff,0x07,0xff, // 43
            0xff,0xff,0x07,0xff, // 44
            0xff,0xff,0x07,0xff, // 45
            0xff,0xff,0x07,0xff, // 46
            0xff,0xff,0x07,0xff, // 47
            0xff,0xff,0x07,0xff, // 48
            0xff,0xff,0x07,0xff, // 49
            0xff,0xff,0xff,0xff, // 50
        },
        {
            0xff,0xfc,0x7f,0xff, // 1
            0xff,0xc0,0x07,0xff, // 2
            0xff,0x00,0x01,0xff, // 3
            0xfc,0x00,0x00,0x7f, // 4
            0xf8,0x00,0x00,0x3f, // 5
            0xf0,0x0f,0xc0,0x3f, // 6
            0xe0,0x3f,0xf0,0x1f, // 7
            0xe0,0x7f,0xfc,0x0f, // 8
            0xc0,0xff,0xfc,0x0f, // 9
            0xc1,0xff,0xfe,0x0f, // 10
            0x81,0xff,0xfe,0x07, // 11
            0xc3,0xff,0xff,0x07, // 12
            0xfb,0xff,0xff,0x07, // 13
            0xff,0xff,0xff,0x07, // 14
            0xff,0xff,0xff,0x07, // 15
            0xff,0xff,0xff,0x07, // 16
            0xff,0xff,0xff,0x07, // 17
            0xff,0xff,0xff,0x07, // 18
            0xff,0xff,0xfe,0x07, // 19
            0xff,0xff,0xfe,0x0f, // 20
            0xff,0xff,0xfc,0x0f, // 21
            0xff,0xff,0xfc,0x1f, // 22
            0xff,0xff,0xf8,0x1f, // 23
            0xff,0xff,0xe0,0x3f, // 24
            0xff,0xff,0xc0,0x7f, // 25
            0xff,0xff,0x80,0xff, // 26
            0xff,0xfe,0x01,0xff, // 27
            0xff,0xfc,0x03,0xff, // 28
            0xff,0xf8,0x0f,0xff, // 29
            0xff,0xf0,0x1f,0xff, // 30
            0xff,0xc0,0x3f,0xff, // 31
            0xff,0x80,0xff,0xff, // 32
            0xff,0x01,0xff,0xff, // 33
            0xfe,0x03,0xff,0xff, // 34
            0xfc,0x07,0xff,0xff, // 35
            0xf8,0x0f,0xff,0xff, // 36
            0xf8,0x1f,0xff,0xff, // 37
            0xf0,0x3f,0xff,0xff, // 38
            0xe0,0x7f,0xff,0xff, // 39
            0xe0,0xff,0xff,0xff, // 40
            0xc0,0xff,0xff,0xff, // 41
            0xc1,0xff,0xff,0xff, // 42
            0xc1,0xff,0xff,0xff, // 43
            0x81,0xff,0xff,0xff, // 44
            0x80,0x00,0x00,0x03, // 45
            0x80,0x00,0x00,0x03, // 46
            0x80,0x00,0x00,0x03, // 47
            0x80,0x00,0x00,0x03, // 48
            0x80,0x00,0x00,0x03, // 49
            0xff,0xff,0xff,0xff, // 50
        },
        {
            0xff,0xfc,0x3f,0xff, // 1
            0xff,0xc0,0x07,0xff, // 2
            0xff,0x00,0x01,0xff, // 3
            0xfe,0x00,0x00,0xff, // 4
            0xfc,0x00,0x00,0x7f, // 5
            0xf8,0x0f,0xe0,0x3f, // 6
            0xf0,0x3f,0xf0,0x1f, // 7
            0xe0,0x7f,0xf8,0x1f, // 8
            0xf8,0x7f,0xfc,0x0f, // 9
            0xfe,0xff,0xfe,0x0f, // 10
            0xff,0xff,0xfe,0x0f, // 11
            0xff,0xff,0xfe,0x0f, // 12
            0xff,0xff,0xfe,0x07, // 13
            0xff,0xff,0xfe,0x0f, // 14
            0xff,0xff,0xfe,0x0f, // 15
            0xff,0xff,0xfe,0x0f, // 16
            0xff,0xff,0xfc,0x0f, // 17
            0xff,0xff,0xfc,0x1f, // 18
            0xff,0xff,0xf8,0x1f, // 19
            0xff,0xff,0xf0,0x3f, // 20
            0xff,0xff,0xe0,0x3f, // 21
            0xff,0xf0,0x00,0x7f, // 22
            0xff,0xf0,0x01,0xff, // 23
            0xff,0xf0,0x01,0xff, // 24
            0xff,0xf0,0x00,0x7f, // 25
            0xff,0xff,0x80,0x3f, // 26
            0xff,0xff,0xf0,0x1f, // 27
            0xff,0xff,0xfc,0x0f, // 28
            0xff,0xff,0xfe,0x07, // 29
            0xff,0xff,0xff,0x07, // 30
            0xff,0xff,0xff,0x03, // 31
            0xff,0xff,0xff,0x83, // 32
            0xff,0xff,0xff,0x83, // 33
            0xff,0xff,0xff,0x81, // 34
            0xff,0xff,0xff,0xc1, // 35
            0xff,0xff,0xff,0xc1, // 36
            0xff,0xff,0xff,0x81, // 37
            0xff,0xff,0xff,0x83, // 38
            0xff,0xff,0xff,0x83, // 39
            0xfb,0xff,0xff,0x83, // 40
            0xc1,0xff,0xff,0x03, // 41
            0x81,0xff,0xfe,0x07, // 42
            0xc0,0xff,0xfe,0x07, // 43
            0xc0,0x7f,0xf8,0x0f, // 44
            0xe0,0x1f,0xe0,0x1f, // 45
            0xf0,0x00,0x00,0x3f, // 46
            0xf8,0x00,0x00,0x7f, // 47
            0xfe,0x00,0x00,0xff, // 48
            0xff,0x80,0x03,0xff, // 49
            0xff,0xf0,0x1f,0xff, // 50
        },
        {
            0xff,0xff,0xff,0xff, // 1
            0xff,0xff,0xff,0xff, // 2
            0xff,0xff,0xe0,0x7f, // 3
            0xff,0xff,0xe0,0x7f, // 4
            0xff,0xff,0xc0,0x7f, // 5
            0xff,0xff,0x80,0x7f, // 6
            0xff,0xff,0x80,0x7f, // 7
            0xff,0xff,0x00,0x7f, // 8
            0xff,0xff,0x00,0x7f, // 9
            0xff,0xfe,0x00,0x7f, // 10
            0xff,0xfe,0x10,0x7f, // 11
            0xff,0xfc,0x10,0x7f, // 12
            0xff,0xf8,0x30,0x7f, // 13
            0xff,0xf8,0x30,0x7f, // 14
            0xff,0xf0,0x70,0x7f, // 15
            0xff,0xf0,0x70,0x7f, // 16
            0xff,0xe0,0xf0,0x7f, // 17
            0xff,0xc1,0xf0,0x7f, // 18
            0xff,0xc1,0xf0,0x7f, // 19
            0xff,0x83,0xf0,0x7f, // 20
            0xff,0x83,0xf0,0x7f, // 21
            0xff,0x07,0xf0,0x7f, // 22
            0xff,0x07,0xf0,0x7f, // 23
            0xfe,0x0f,0xf0,0x7f, // 24
            0xfc,0x1f,0xf0,0x7f, // 25
            0xfc,0x1f,0xf0,0x7f, // 26
            0xf8,0x3f,0xf0,0x7f, // 27
            0xf8,0x3f,0xf0,0x7f, // 28
            0xf0,0x7f,0xf0,0x7f, // 29
            0xf0,0x7f,0xf0,0x7f, // 30
            0xe0,0xff,0xf0,0x7f, // 31
            0xc0,0x00,0x00,0x7f, // 32
            0xc0,0x00,0x00,0x01, // 33
            0x80,0x00,0x00,0x01, // 34
            0x80,0x00,0x00,0x01, // 35
            0x00,0x00,0x00,0x01, // 36
            0xff,0xff,0xf0,0x7f, // 37
            0xff,0xff,0xf0,0x7f, // 38
            0xff,0xff,0xf0,0x7f, // 39
            0xff,0xff,0xf0,0x7f, // 40
            0xff,0xff,0xf0,0x7f, // 41
            0xff,0xff,0xf0,0x7f, // 42
            0xff,0xff,0xf0,0x7f, // 43
            0xff,0xff,0xf0,0x7f, // 44
            0xff,0xff,0xf0,0x7f, // 45
            0xff,0xff,0xf0,0x7f, // 46
            0xff,0xff,0xf0,0x7f, // 47
            0xff,0xff,0xf0,0x7f, // 48
            0xff,0xff,0xf0,0x7f, // 49
            0xff,0xff,0xff,0xff, // 50
        },
        {
            0xff,0xff,0xff,0xff, // 1
            0xff,0xff,0xff,0xff, // 2
            0xfc,0x00,0x00,0x0f, // 3
            0xfc,0x00,0x00,0x0f, // 4
            0xfc,0x00,0x00,0x0f, // 5
            0xfc,0x00,0x00,0x0f, // 6
            0xfc,0x1f,0xff,0xff, // 7
            0xfc,0x1f,0xff,0xff, // 8
            0xfc,0x3f,0xff,0xff, // 9
            0xf8,0x3f,0xff,0xff, // 10
            0xf8,0x3f,0xff,0xff, // 11
            0xf8,0x3f,0xff,0xff, // 12
            0xf8,0x3f,0xff,0xff, // 13
            0xf8,0x3f,0xff,0xff, // 14
            0xf8,0x3f,0xff,0xff, // 15
            0xf8,0x7f,0xff,0xff, // 16
            0xf0,0x7f,0xff,0xff, // 17
            0xf0,0x7f,0xff,0xff, // 18
            0xf0,0x7c,0x1f,0xff, // 19
            0xf0,0x40,0x03,0xff, // 20
            0xf0,0x00,0x00,0xff, // 21
            0xf0,0x00,0x00,0x3f, // 22
            0xf0,0x00,0x00,0x1f, // 23
            0xe0,0x0f,0xf0,0x0f, // 24
            0xfc,0x3f,0xf8,0x0f, // 25
            0xff,0x7f,0xfe,0x07, // 26
            0xff,0xff,0xfe,0x07, // 27
            0xff,0xff,0xff,0x03, // 28
            0xff,0xff,0xff,0x83, // 29
            0xff,0xff,0xff,0x81, // 30
            0xff,0xff,0xff,0x81, // 31
            0xff,0xff,0xff,0xc1, // 32
            0xff,0xff,0xff,0xc1, // 33
            0xff,0xff,0xff,0xc1, // 34
            0xff,0xff,0xff,0xc1, // 35
            0xff,0xff,0xff,0xc1, // 36
            0xff,0xff,0xff,0xc1, // 37
            0xfd,0xff,0xff,0xc1, // 38
            0x81,0xff,0xff,0x81, // 39
            0xc1,0xff,0xff,0x83, // 40
            0xc0,0xff,0xff,0x83, // 41
            0xe0,0x7f,0xff,0x07, // 42
            0xe0,0x7f,0xfe,0x07, // 43
            0xf0,0x1f,0xfc,0x0f, // 44
            0xf8,0x0f,0xf0,0x0f, // 45
            0xfc,0x00,0x00,0x1f, // 46
            0xfe,0x00,0x00,0x3f, // 47
            0xff,0x00,0x00,0xff, // 48
            0xff,0xc0,0x01,0xff, // 49
            0xff,0xf8,0x0f,0xff, // 50
        },
        {
            0xff,0xff,0xff,0xff, // 1
            0xff,0xff,0xfd,0xff, // 2
            0xff,0xff,0x83,0xff, // 3
            0xff,0xff,0x03,0xff, // 4
            0xff,0xff,0x07,0xff, // 5
            0xff,0xfe,0x0f,0xff, // 6
            0xff,0xfe,0x0f,0xff, // 7
            0xff,0xfc,0x1f,0xff, // 8
            0xff,0xfc,0x1f,0xff, // 9
            0xff,0xf8,0x3f,0xff, // 10
            0xff,0xf0,0x3f,0xff, // 11
            0xff,0xf0,0x7f,0xff, // 12
            0xff,0xe0,0x7f,0xff, // 13
            0xff,0xe0,0xff,0xff, // 14
            0xff,0xc1,0xff,0xff, // 15
            0xff,0xc1,0xff,0xff, // 16
            0xff,0x83,0xff,0xff, // 17
            0xff,0x03,0xff,0xff, // 18
            0xff,0x07,0xff,0xff, // 19
            0xfe,0x07,0xff,0xff, // 20
            0xfe,0x0f,0xff,0xff, // 21
            0xfc,0x08,0x1f,0xff, // 22
            0xfc,0x00,0x03,0xff, // 23
            0xf8,0x00,0x00,0xff, // 24
            0xf8,0x00,0x00,0x7f, // 25
            0xf0,0x00,0x00,0x3f, // 26
            0xe0,0x0f,0xe0,0x1f, // 27
            0xe0,0x3f,0xf8,0x0f, // 28
            0xe0,0x7f,0xfc,0x0f, // 29
            0xc0,0xff,0xfe,0x07, // 30
            0xc0,0xff,0xff,0x07, // 31
            0xc1,0xff,0xff,0x83, // 32
            0xc1,0xff,0xff,0x83, // 33
            0x83,0xff,0xff,0x83, // 34
            0x83,0xff,0xff,0x83, // 35
            0x83,0xff,0xff,0xc3, // 36
            0x83,0xff,0xff,0xc3, // 37
            0x83,0xff,0xff,0x83, // 38
            0x81,0xff,0xff,0x83, // 39
            0xc1,0xff,0xff,0x83, // 40
            0xc1,0xff,0xff,0x07, // 41
            0xe0,0xff,0xfe,0x07, // 42
            0xe0,0x7f,0xfc,0x07, // 43
            0xf0,0x1f,0xf8,0x0f, // 44
            0xf0,0x0f,0xe0,0x1f, // 45
            0xf8,0x00,0x00,0x3f, // 46
            0xfc,0x00,0x00,0x7f, // 47
            0xff,0x00,0x00,0xff, // 48
            0xff,0x80,0x03,0xff, // 49
            0xff,0xf0,0x1f,0xff, // 50
        },
        {
            0xff,0xff,0xff,0xff, // 1
            0xff,0xff,0xff,0xff, // 2
            0x80,0x00,0x00,0x00, // 3
            0x80,0x00,0x00,0x01, // 4
            0x80,0x00,0x00,0x01, // 5
            0x80,0x00,0x00,0x01, // 6
            0xff,0xff,0xff,0x83, // 7
            0xff,0xff,0xff,0x83, // 8
            0xff,0xff,0xff,0x07, // 9
            0xff,0xff,0xff,0x07, // 10
            0xff,0xff,0xfe,0x07, // 11
            0xff,0xff,0xfe,0x0f, // 12
            0xff,0xff,0xfe,0x0f, // 13
            0xff,0xff,0xfc,0x0f, // 14
            0xff,0xff,0xfc,0x1f, // 15
            0xff,0xff,0xf8,0x1f, // 16
            0xff,0xff,0xf8,0x3f, // 17
            0xff,0xff,0xf8,0x3f, // 18
            0xff,0xff,0xf0,0x3f, // 19
            0xff,0xff,0xf0,0x7f, // 20
            0xff,0xff,0xe0,0x7f, // 21
            0xff,0xff,0xe0,0x7f, // 22
            0xff,0xff,0xe0,0xff, // 23
            0xff,0xff,0xc0,0xff, // 24
            0xff,0xff,0xc1,0xff, // 25
            0xff,0xff,0x81,0xff, // 26
            0xff,0xff,0x81,0xff, // 27
            0xff,0xff,0x83,0xff, // 28
            0xff,0xff,0x03,0xff, // 29
            0xff,0xff,0x07,0xff, // 30
            0xff,0xfe,0x07,0xff, // 31
            0xff,0xfe,0x07,0xff, // 32
            0xff,0xfe,0x0f,0xff, // 33
            0xff,0xfc,0x0f,0xff, // 34
            0xff,0xfc,0x0f,0xff, // 35
            0xff,0xf8,0x1f,0xff, // 36
            0xff,0xf8,0x1f,0xff, // 37
            0xff,0xf8,0x3f,0xff, // 38
            0xff,0xf0,0x3f,0xff, // 39
            0xff,0xf0,0x3f,0xff, // 40
            0xff,0xe0,0x7f,0xff, // 41
            0xff,0xe0,0x7f,0xff, // 42
            0xff,0xe0,0x7f,0xff, // 43
            0xff,0xc0,0xff,0xff, // 44
            0xff,0xc0,0xff,0xff, // 45
            0xff,0xc1,0xff,0xff, // 46
            0xff,0x81,0xff,0xff, // 47
            0xff,0x81,0xff,0xff, // 48
            0xff,0x03,0xff,0xff, // 49
            0xff,0xff,0xff,0xff, // 50
        },
        {
            0xff,0xfc,0x1f,0xff, // 1
            0xff,0xc0,0x03,0xff, // 2
            0xff,0x00,0x00,0xff, // 3
            0xfe,0x00,0x00,0x7f, // 4
            0xfc,0x00,0x00,0x3f, // 5
            0xf8,0x0f,0xe0,0x1f, // 6
            0xf0,0x1f,0xf8,0x0f, // 7
            0xf0,0x3f,0xfc,0x0f, // 8
            0xe0,0x7f,0xfe,0x07, // 9
            0xe0,0xff,0xff,0x07, // 10
            0xe0,0xff,0xff,0x07, // 11
            0xe0,0xff,0xff,0x07, // 12
            0xe0,0xff,0xff,0x07, // 13
            0xe0,0xff,0xff,0x07, // 14
            0xe0,0xff,0xff,0x07, // 15
            0xe0,0xff,0xff,0x07, // 16
            0xe0,0x7f,0xfe,0x07, // 17
            0xf0,0x3f,0xfc,0x0f, // 18
            0xf0,0x1f,0xfc,0x0f, // 19
            0xf8,0x0f,0xf0,0x1f, // 20
            0xfc,0x00,0x00,0x3f, // 21
            0xfe,0x00,0x00,0x7f, // 22
            0xff,0x00,0x00,0xff, // 23
            0xfe,0x00,0x00,0x7f, // 24
            0xfc,0x00,0x00,0x3f, // 25
            0xf8,0x0f,0xf0,0x1f, // 26
            0xf0,0x3f,0xfc,0x0f, // 27
            0xe0,0x7f,0xfe,0x07, // 28
            0xc0,0xff,0xff,0x03, // 29
            0xc1,0xff,0xff,0x83, // 30
            0x83,0xff,0xff,0xc1, // 31
            0x83,0xff,0xff,0xc1, // 32
            0x83,0xff,0xff,0xc0, // 33
            0x83,0xff,0xff,0xe0, // 34
            0x03,0xff,0xff,0xe0, // 35
            0x03,0xff,0xff,0xe0, // 36
            0x83,0xff,0xff,0xe0, // 37
            0x83,0xff,0xff,0xc0, // 38
            0x83,0xff,0xff,0xc1, // 39
            0x81,0xff,0xff,0xc1, // 40
            0x81,0xff,0xff,0x81, // 41
            0xc0,0xff,0xff,0x03, // 42
            0xc0,0x7f,0xfe,0x03, // 43
            0xe0,0x3f,0xfc,0x07, // 44
            0xf0,0x0f,0xf0,0x0f, // 45
            0xf8,0x00,0x00,0x1f, // 46
            0xfc,0x00,0x00,0x3f, // 47
            0xfe,0x00,0x00,0x7f, // 48
            0xff,0x80,0x01,0xff, // 49
            0xff,0xf0,0x0f,0xff, // 50
        },
        {
            0xff,0xff,0x7f,0xff, // 1
            0xff,0xe0,0x03,0xff, // 2
            0xff,0x80,0x00,0xff, // 3
            0xff,0x00,0x00,0x7f, // 4
            0xfc,0x00,0x00,0x3f, // 5
            0xf8,0x01,0x80,0x1f, // 6
            0xf8,0x0f,0xf8,0x0f, // 7
            0xf0,0x3f,0xfe,0x07, // 8
            0xe0,0x7f,0xfe,0x07, // 9
            0xe0,0xff,0xff,0x03, // 10
            0xc0,0xff,0xff,0x83, // 11
            0xc1,0xff,0xff,0x83, // 12
            0xc1,0xff,0xff,0xc1, // 13
            0xc1,0xff,0xff,0xc1, // 14
            0xc1,0xff,0xff,0xc1, // 15
            0xc1,0xff,0xff,0xc1, // 16
            0xc1,0xff,0xff,0xc1, // 17
            0xc1,0xff,0xff,0xc1, // 18
            0xc1,0xff,0xff,0x83, // 19
            0xc0,0xff,0xff,0x83, // 20
            0xe0,0x7f,0xff,0x03, // 21
            0xe0,0x7f,0xfe,0x03, // 22
            0xf0,0x3f,0xfc,0x07, // 23
            0xf8,0x0f,0xf8,0x07, // 24
            0xf8,0x00,0x80,0x0f, // 25
            0xfc,0x00,0x00,0x0f, // 26
            0xff,0x00,0x00,0x1f, // 27
            0xff,0x80,0x00,0x1f, // 28
            0xff,0xe0,0x00,0x3f, // 29
            0xff,0xff,0xf0,0x3f, // 30
            0xff,0xff,0xf0,0x7f, // 31
            0xff,0xff,0xe0,0x7f, // 32
            0xff,0xff,0xe0,0xff, // 33
            0xff,0xff,0xc1,0xff, // 34
            0xff,0xff,0xc1,0xff, // 35
            0xff,0xff,0x83,0xff, // 36
            0xff,0xff,0x03,0xff, // 37
            0xff,0xff,0x07,0xff, // 38
            0xff,0xfe,0x07,0xff, // 39
            0xff,0xfe,0x0f,0xff, // 40
            0xff,0xfc,0x0f,0xff, // 41
            0xff,0xfc,0x1f,0xff, // 42
            0xff,0xf8,0x3f,0xff, // 43
            0xff,0xf8,0x3f,0xff, // 44
            0xff,0xf0,0x7f,0xff, // 45
            0xff,0xe0,0x7f,0xff, // 46
            0xff,0xe0,0xff,0xff, // 47
            0xff,0xc0,0xff,0xff, // 48
            0xff,0x81,0xff,0xff, // 49
            0xff,0xff,0xff,0xff, // 50
        }
    };
    partialScreenBitmap(x_location, y_location, numbers[number], 50, 32);
    return;
}

void hV_Screen_Buffer::drawNumBig(String number, uint16_t x_location, uint16_t y_location) 
{
    uint8_t currentNumber;
    uint16_t new_x = x_location;
    for (int k = 0; k < number.length(); k++) {
        //0 is ascii character 48 so subtracting 48 corrects currentNumber to digit itself
        currentNumber = number.charAt(k) - 48;
        drawDigitBig(currentNumber, new_x, y_location);
        new_x += 34;
    }
    return;
}

void hV_Screen_Buffer::clearNumDigit(uint8_t numDigit, uint16_t x_location, uint16_t y_location) {
    uint8_t blankBitmap[] {
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff, //20
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff, //40
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,

    };
    for(int i = 0; i < numDigit; i++) partialScreenBitmap(x_location + i*32, y_location, blankBitmap, 32, 50);
}

void hV_Screen_Buffer::partialScreenBitmap(uint16_t x_location, uint16_t y_location, uint8_t *bitmap, uint16_t width, uint16_t height, uint16_t highColor, uint16_t lowColor)
{
    // uint16_t boardWidth = 296;
    // uint16_t boardHeight = 152;
    uint8_t currentBitPosition = 0;
    uint16_t currentBytePosition = 0;
    uint16_t currentByteValue = bitmap[0];
    for(uint16_t i = 0; i < width; i++) 
    {
        currentBitPosition = 0;
        for(uint16_t j = 0; j < height; j++) 
        {
            if((currentByteValue << currentBitPosition) & 0b10000000) { 
                point(j+x_location, i+y_location, highColor);
            }
            else {
                point(j+x_location, i+y_location, lowColor);
            }

            currentBitPosition ++;
            currentBitPosition = currentBitPosition%8;

            if(!currentBitPosition) {
                currentBytePosition ++;
                currentByteValue = bitmap[currentBytePosition];
            }
        }
    }
}

void hV_Screen_Buffer::fullScreenBitmap(uint8_t bitmap[], uint16_t highColor, uint16_t lowColor, uint16_t boardWidth, uint16_t boardHeight)
{
    // uint16_t boardWidth = 296;
    // uint16_t boardHeight = 152;
    uint8_t currentBitPosition = 0;
    uint16_t currentBytePosition = 0;
    uint16_t currentByteValue = bitmap[0];
    for(uint16_t i = 0; i < boardWidth; i++) 
    {
        for(uint16_t j = 0; j < boardHeight; j++) 
        {
            if((currentByteValue << currentBitPosition) & 0b10000000) { 
                point(j, i, highColor);
            }
            else {
                point(j, i, lowColor);
            }

            currentBitPosition ++;
            currentBitPosition = currentBitPosition%8;

            if(!currentBitPosition) {
                currentBytePosition ++;
                currentByteValue = bitmap[currentBytePosition];
            }
        }
    }
}

void hV_Screen_Buffer::drawSparkfunLogo() {
    uint8_t logo[] = {
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 1
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 2
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 3
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 4
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 5
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 6
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 7
        0xff,0xff,0xff,0xff,0xff,0xf9,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 8
        0xff,0xff,0xff,0xff,0xff,0x81,0xff,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 9
        0xff,0xff,0xff,0xff,0xff,0x01,0xff,0x00,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 10
        0xff,0xff,0xff,0xff,0xfc,0x01,0xfe,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 11
        0xff,0xff,0xff,0xff,0xf8,0x01,0xfc,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 12
        0xff,0xff,0xff,0xff,0xf8,0x01,0xf8,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 13
        0xff,0xff,0xff,0xff,0xf0,0x01,0xf8,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 14
        0xff,0xff,0xff,0xff,0xe0,0x01,0xf0,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 15
        0xff,0xff,0xff,0xff,0xe0,0x01,0xf0,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 16
        0xff,0xff,0xff,0xff,0xe0,0x0f,0xf0,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 17
        0xff,0xff,0xff,0xff,0xc0,0x1f,0xe0,0x07,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 18
        0xff,0xff,0xff,0xff,0xc0,0x3f,0xe0,0x0f,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 19
        0xff,0xff,0xff,0xff,0xc0,0x7f,0xe0,0x1f,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 20
        0xff,0xff,0xff,0xff,0xc0,0x7f,0xe0,0x1f,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 21
        0xff,0xff,0xff,0xff,0xc0,0x7f,0xc0,0x1f,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 22
        0xff,0xff,0xff,0xff,0xc0,0x7f,0xc0,0x3f,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 23
        0xff,0xff,0xff,0xff,0xc0,0x7f,0xc0,0x3f,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 24
        0xff,0xff,0xff,0xff,0xc0,0x7f,0x80,0x3f,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 25
        0xff,0xff,0xff,0xff,0xc0,0x7f,0x80,0x7f,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 26
        0xff,0xff,0xff,0xff,0xc0,0x3f,0x00,0x7f,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 27
        0xff,0xff,0xff,0xff,0xc0,0x1f,0x00,0x7e,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 28
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x78,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 29
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0xf8,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 30
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0xf8,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 31
        0xff,0xff,0xff,0xff,0xf0,0x00,0x00,0xf8,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 32
        0xff,0xff,0xff,0xff,0xf8,0x00,0x01,0xf8,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 33
        0xff,0xff,0xff,0xff,0xf8,0x00,0x03,0xf8,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 34
        0xff,0xff,0xff,0xff,0xfc,0x00,0x03,0xf8,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 35
        0xff,0xff,0xff,0xff,0xff,0x00,0x07,0xf8,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 36
        0xff,0xff,0xff,0xff,0xff,0xc0,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 37
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 38
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 39
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 40
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 41
        0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 42
        0xff,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 43
        0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 44
        0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 45
        0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 46
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 47
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 48
        0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 49
        0xff,0xfc,0x00,0x00,0x00,0x00,0x1f,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 50
        0xff,0xff,0xff,0xff,0xfc,0x03,0xff,0xf0,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 51
        0xff,0xff,0xff,0xff,0xf8,0x0f,0xff,0xfc,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 52
        0xff,0xff,0xff,0xff,0xf0,0x1f,0xff,0xfe,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 53
        0xff,0xff,0xff,0xff,0xf0,0x1f,0xff,0xff,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 54
        0xff,0xff,0xff,0xff,0xe0,0x3f,0xff,0xff,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 55
        0xff,0xff,0xff,0xff,0xe0,0x3f,0xff,0xff,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 56
        0xff,0xff,0xff,0xff,0xc0,0x3f,0xff,0xff,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 57
        0xff,0xff,0xff,0xff,0xc0,0x3f,0xff,0xff,0x80,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 58
        0xff,0xff,0xff,0xff,0xc0,0x3f,0xff,0xff,0x80,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 59
        0xff,0xff,0xff,0xff,0xc0,0x3f,0xff,0xff,0x80,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 60
        0xfe,0x00,0x00,0x7f,0xc0,0x3f,0xff,0xff,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 61
        0xfe,0x00,0x00,0x7f,0xc0,0x1f,0xff,0xfe,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 62
        0xfe,0x00,0x00,0x7f,0xc0,0x0f,0xff,0xfc,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 63
        0xfe,0x1c,0x38,0x7f,0xe0,0x03,0xff,0xf0,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 64
        0xfe,0x3e,0x3c,0x7f,0xe0,0x00,0x3f,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 65
        0xfe,0x3e,0x3c,0x7f,0xe0,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 66
        0xfe,0x3e,0x3c,0x7f,0xf0,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 67
        0xfe,0x3e,0x3c,0x7f,0xf8,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 68
        0xfe,0x3e,0x3c,0x7f,0xfc,0x00,0x00,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 69
        0xfe,0x3e,0x3c,0x7f,0xfe,0x00,0x00,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 70
        0xfe,0x3e,0x7c,0x7f,0xff,0x00,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 71
        0xfe,0x3f,0xfc,0x7f,0xff,0xc0,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 72
        0xff,0xff,0xff,0xff,0xff,0xf8,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 73
        0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 74
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 75
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 76
        0xff,0xff,0xff,0xff,0xff,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 77
        0xff,0xff,0xff,0xff,0xfe,0x00,0x1f,0xf1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 78
        0xff,0xff,0xff,0xff,0xf8,0x00,0x0f,0xf0,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 79
        0xff,0xff,0xff,0xff,0xf0,0x00,0x07,0xf0,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 80
        0xff,0xff,0xff,0xff,0xf0,0x00,0x03,0xf0,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 81
        0xff,0x80,0x00,0xff,0xe0,0x00,0x01,0xf0,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 82
        0xfe,0x00,0x00,0x7f,0xe0,0x00,0x01,0xf0,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 83
        0xfe,0x00,0x00,0x7f,0xc0,0x00,0x01,0xf0,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 84
        0xfe,0x00,0x00,0x7f,0xc0,0x00,0x00,0xf0,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 85
        0xfe,0x1f,0xff,0xff,0xc0,0x1f,0x00,0xf0,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 86
        0xfe,0x1f,0xff,0xff,0xc0,0x3f,0x80,0xfe,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 87
        0xfe,0x1f,0xff,0xff,0xc0,0x7f,0xc0,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 88
        0xfe,0x1f,0xff,0xff,0xc0,0x7f,0xc0,0xff,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 89
        0xfe,0x1f,0xff,0xff,0xc0,0x7f,0xe0,0x7f,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 90
        0xfe,0x1f,0xff,0xff,0xc0,0x7f,0xe0,0x7f,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 91
        0xfe,0x3f,0xff,0xff,0xc0,0x7f,0xe0,0x7f,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 92
        0xff,0x3f,0xff,0xff,0xe0,0x7f,0xe0,0x7f,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 93
        0xff,0xff,0xff,0xff,0xe0,0x7f,0xe0,0x7f,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 94
        0xff,0xff,0xff,0xff,0xf0,0x3f,0xf0,0x7f,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 95
        0xff,0xff,0xff,0xff,0xf0,0x1f,0xf0,0x3f,0x80,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 96
        0xff,0xff,0xff,0xff,0xf8,0x0f,0xf0,0x3f,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 97
        0xff,0xff,0xff,0xff,0xfc,0x00,0xf0,0x0c,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 98
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 99
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 100
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 101
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 102
        0xff,0x00,0x00,0x7f,0xe0,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 103
        0xfe,0x00,0x00,0x7f,0xe0,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 104
        0xfe,0x00,0x00,0x7f,0xe0,0x00,0x00,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 105
        0xfe,0x1c,0x38,0x7f,0xe0,0x00,0x00,0x00,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 106
        0xfe,0x3e,0x3c,0x7f,0xe0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 107
        0xfe,0x3e,0x3c,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 108
        0xfe,0x3e,0x3c,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 109
        0xfe,0x3e,0x3c,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 110
        0xfe,0x3e,0x3c,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 111
        0xfe,0x3e,0x3c,0x7f,0xe0,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 112
        0xfe,0x3e,0x3c,0x7f,0xe0,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 113
        0xfe,0x3f,0xfc,0x7f,0xe0,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 114
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 115
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 116
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 117
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 118
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 119
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 120
        0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 121
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 122
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 123
        0xff,0xf8,0x1f,0xff,0xff,0xff,0xff,0xf8,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 124
        0xff,0xc0,0x03,0xff,0xff,0xff,0xff,0xfc,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 125
        0xff,0x80,0x01,0xff,0xff,0xff,0xff,0xfe,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 126
        0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xfe,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 127
        0xfe,0x0f,0xf0,0x7f,0xff,0xff,0xff,0xfe,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 128
        0xfe,0x1f,0xf8,0x7f,0xff,0xff,0xff,0xfe,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 129
        0xfe,0x3f,0xfc,0x7f,0xff,0xff,0xff,0xfe,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 130
        0xfe,0x3f,0xfc,0x7f,0xff,0xff,0xff,0xfe,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 131
        0xfe,0x3f,0xfc,0x7f,0xff,0xff,0xff,0xfe,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 132
        0xfe,0x3f,0xfc,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 133
        0xfe,0x1f,0xf8,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 134
        0xff,0x07,0xe0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 135
        0xff,0x07,0xe0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 136
        0xff,0x87,0xe1,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 137
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 138
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 139
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 140
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 141
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 142
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 143
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 144
        0xff,0xff,0xff,0xff,0xff,0xfe,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 145
        0xff,0xff,0xfc,0x7f,0xff,0xff,0x80,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 146
        0xff,0xff,0xfc,0x7f,0xff,0xff,0xc0,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 147
        0xff,0xff,0xfc,0x7f,0xff,0xff,0xe0,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 148
        0xff,0xff,0xfc,0x7f,0xff,0xff,0xc0,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 149
        0xff,0xff,0xfc,0x7f,0xff,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 150
        0xff,0x00,0x00,0x7f,0xff,0xfc,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 151
        0xfe,0x00,0x00,0x7f,0xff,0xf8,0x00,0x00,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 152
        0xfe,0x00,0x00,0x7f,0xff,0xe0,0x00,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 153
        0xff,0x00,0x00,0x7f,0xff,0x80,0x00,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 154
        0xff,0xff,0xfc,0x7f,0xfe,0x00,0x00,0x60,0x03,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0xff,0xff,0xff, // 155
        0xff,0xff,0xfc,0x7f,0xf8,0x00,0x00,0xf0,0x00,0xff,0xc0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff, // 156
        0xff,0xff,0xfc,0x7f,0xe0,0x00,0x03,0xf8,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x3f,0xff,0xff,0xff, // 157
        0xff,0xff,0xfc,0x7f,0xe0,0x00,0x0f,0xfc,0x00,0xff,0xf0,0x00,0x00,0x00,0x00,0x1f,0xff,0xff,0xff, // 158
        0xff,0xff,0xfc,0x7f,0xe0,0x00,0x3f,0xfe,0x00,0xff,0xfc,0x00,0x00,0x00,0x00,0x1f,0xff,0xff,0xff, // 159
        0xff,0xff,0xff,0xff,0xe0,0x00,0x7f,0xff,0x00,0xff,0xfe,0x00,0x00,0x00,0x00,0x0f,0xff,0xff,0xff, // 160
        0xff,0xff,0xff,0xff,0xe0,0x01,0xff,0xff,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x0f,0xff,0xff,0xff, // 161
        0xff,0xff,0xff,0xff,0xe0,0x07,0xff,0xff,0xe0,0xff,0xff,0x80,0x00,0x00,0x00,0x0f,0xff,0xff,0xff, // 162
        0xff,0xff,0xff,0xff,0xe0,0x0f,0xff,0xff,0xf0,0xff,0xff,0xe0,0x00,0x00,0x03,0xcf,0xff,0xff,0xff, // 163
        0xff,0xff,0xff,0xff,0xe0,0x3f,0xff,0xff,0xf8,0xff,0xff,0xf0,0x00,0x00,0x07,0xef,0xff,0xff,0xff, // 164
        0xff,0xff,0xff,0xff,0xe0,0xff,0xff,0xff,0xfc,0xff,0xff,0xf8,0x00,0x00,0x0f,0xff,0xff,0xff,0xff, // 165
        0xff,0xff,0xff,0xff,0xe3,0xff,0xff,0xff,0x9e,0xff,0xff,0xfc,0x00,0x00,0x0f,0xff,0xff,0xff,0xff, // 166
        0xff,0xff,0xff,0xff,0xe7,0xff,0xff,0xff,0x8f,0xff,0xff,0xfe,0x00,0x00,0x1f,0xff,0xf0,0x0f,0xff, // 167
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0xff,0xff,0x00,0x00,0x1f,0xff,0xc0,0x07,0xff, // 168
        0xfe,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0x00,0x00,0x1f,0xff,0x80,0x03,0xff, // 169
        0xfe,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0x81,0xff,0xff,0xff,0x00,0x00,0x0f,0xfe,0x00,0x01,0xff, // 170
        0xfe,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0x80,0xff,0xff,0xff,0x80,0x00,0x0f,0xfc,0x00,0x00,0xff, // 171
        0xff,0x80,0x00,0x7f,0xff,0xff,0xff,0xff,0x80,0xff,0xff,0xff,0x80,0x00,0x07,0xf8,0x00,0x00,0xff, // 172
        0xff,0xfc,0x7c,0x7f,0xff,0xff,0xff,0xff,0x80,0xff,0xff,0xff,0x00,0x00,0x01,0xe0,0x00,0x00,0x7f, // 173
        0xff,0xfc,0x7c,0x7f,0xe0,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x7f, // 174
        0xff,0xfc,0x7c,0x7f,0xe0,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x7f, // 175
        0xff,0xfc,0x7c,0x7f,0xe0,0x00,0x00,0x00,0x00,0x00,0x1f,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x7f, // 176
        0xff,0xfc,0x7c,0x7f,0xe0,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0x80,0x00,0x00,0x00,0x01,0xf0,0x7f, // 177
        0xff,0x80,0x38,0x7f,0xe0,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0x80,0x00,0x00,0x00,0x07,0xf8,0x7f, // 178
        0xfe,0x00,0x00,0x7f,0xe0,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x80,0x00,0x00,0x00,0x0f,0xfc,0xff, // 179
        0xfe,0x01,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0xc0,0x00,0x00,0x00,0x0f,0xfc,0xff, // 180
        0xfe,0x03,0x81,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0xc0,0x00,0x00,0x00,0x1f,0xfc,0xff, // 181
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xe0,0x00,0x00,0x00,0x3f,0xff,0xff, // 182
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0xf8,0x03,0xff,0xf0,0x00,0x00,0x00,0x3f,0xff,0xff, // 183
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0xfc,0x03,0xff,0xf0,0x00,0x00,0x00,0x3f,0xff,0xff, // 184
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0xfc,0x03,0xff,0xf8,0x00,0x00,0x00,0x3f,0xff,0xff, // 185
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0xfc,0x03,0xff,0xfc,0x00,0x00,0x00,0x0f,0xff,0xff, // 186
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0xfc,0x03,0xff,0xfe,0x00,0x00,0x00,0x03,0xff,0xff, // 187
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0xfc,0x03,0xff,0xff,0x80,0x00,0x00,0x07,0xff,0xff, // 188
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x00,0x0f,0xff,0xff, // 189
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x00,0x3f,0xff,0xff, // 190
        0xff,0xfc,0x1f,0xff,0xff,0xf8,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0xff,0xff,0xff, // 191
        0xff,0xc0,0x03,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xc0,0x07,0xff,0xff,0xff, // 192
        0xff,0x80,0x01,0xff,0xfc,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 193
        0xff,0x00,0x00,0xff,0xf8,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 194
        0xfe,0x07,0xf0,0x7f,0xf0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 195
        0xfe,0x1f,0xf8,0x7f,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 196
        0xfe,0x3f,0xfc,0x7f,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 197
        0xfe,0x3f,0xfc,0x7f,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 198
        0xfe,0x3f,0xfc,0x7f,0xc0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 199
        0xfe,0x3f,0xfc,0x7f,0xc0,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 200
        0xfe,0x1f,0xf8,0x7f,0xc0,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 201
        0xfe,0x0f,0xf8,0x7f,0xc0,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 202
        0xff,0x03,0xc0,0xff,0xc0,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 203
        0xff,0x80,0x00,0xff,0xc0,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 204
        0xff,0xc0,0x03,0xff,0xc0,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 205
        0xff,0xf0,0x07,0xff,0xc0,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 206
        0xff,0xff,0xff,0xff,0xe0,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 207
        0xff,0xff,0xff,0xff,0xe0,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 208
        0xff,0xff,0xff,0xff,0xf0,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 209
        0xff,0xff,0xff,0xff,0xf8,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 210
        0xff,0xff,0xff,0xff,0xfc,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 211
        0xff,0xff,0xff,0xff,0xfe,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 212
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 213
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 214
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 215
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 216
        0xfe,0x00,0x00,0x7f,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 217
        0xfe,0x00,0x00,0x7f,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 218
        0xfe,0x00,0x00,0x7f,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 219
        0xff,0xff,0xc0,0x7f,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 220
        0xff,0xff,0x81,0xff,0xe0,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 221
        0xff,0xfe,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 222
        0xff,0xf8,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 223
        0xff,0xe0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 224
        0xff,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 225
        0xff,0x03,0xff,0xff,0xe0,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 226
        0xfe,0x00,0x00,0x7f,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 227
        0xfe,0x00,0x00,0x7f,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 228
        0xfe,0x00,0x00,0x7f,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 229
        0xff,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 230
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 231
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 232
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 233
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 234
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 235
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 236
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 237
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 238
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 239
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 240
        0xfe,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 241
        0xfe,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 242
        0xfe,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0x80,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 243
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 244
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 245
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 246
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 247
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 248
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 249
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 250
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 251
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 252
        0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 253
        0xff,0xf0,0x0f,0xff,0xe0,0x00,0x00,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 254
        0xff,0xc0,0x03,0xff,0xe0,0x00,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 255
        0xff,0x80,0x01,0xff,0xe0,0x00,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 256
        0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 257
        0xfe,0x0f,0xf0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 258
        0xfe,0x1f,0xf8,0x7f,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 259
        0xfe,0x3f,0xfc,0x7f,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 260
        0xfe,0x3f,0xfc,0x7f,0xe0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 261
        0xfe,0x3f,0xfc,0x7f,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 262
        0xfe,0x3f,0xfc,0x7f,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 263
        0xfe,0x0f,0xf8,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 264
        0xff,0x07,0xe0,0xff,0xe0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 265
        0xff,0x07,0xe0,0xff,0xf8,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 266
        0xff,0xc7,0xe1,0xff,0xe3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 267
        0xff,0xff,0xff,0xff,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 268
        0xff,0xff,0xff,0xff,0xe0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 269
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 270
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 271
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 272
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 273
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 274
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 275
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 276
        0xff,0x87,0x81,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 277
        0xff,0x07,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 278
        0xfe,0x0e,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 279
        0xfe,0x1e,0x18,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 280
        0xfe,0x3e,0x1c,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 281
        0xfe,0x3c,0x3c,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 282
        0xfe,0x3c,0x3c,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 283
        0xfe,0x3c,0x3c,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 284
        0xfe,0x18,0x78,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 285
        0xfe,0x00,0x70,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 286
        0xff,0x00,0x70,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 287
        0xff,0x80,0xf1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 288
        0xff,0xe3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 289
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 290
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 291
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 292
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 293
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 294
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 295
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 296
    };
    fullScreenBitmap(logo);
}

void hV_Screen_Buffer::drawSensorFrame(uint8_t sensor, uint8_t frameNumber) {
    // globalRefresh(5);
    uint8_t co2_bitmap[] = {
        //co2
        //Image Name: co2.jpg ; Width: 104 ; Height: 69
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 1
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,0x00,0x7f,0xff,0xff,0xff, // 2
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x0f,0xff,0xff,0xff, // 3
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x03,0xff,0xff,0xff, // 4
        0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x00,0xff,0xff,0xff, // 5
        0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x00,0x00,0x3f,0xff,0xff, // 6
        0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x1f,0xff,0xff, // 7
        0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x00,0x00,0x0f,0xff,0xff, // 8
        0xff,0xff,0xff,0xf8,0x00,0x7f,0x80,0x00,0x00,0x00,0x07,0xff,0xff, // 9
        0xff,0xff,0xff,0xe0,0x00,0x0f,0x00,0x00,0x00,0x00,0x03,0xff,0xff, // 10
        0xff,0xff,0xff,0x80,0x00,0x06,0x00,0x00,0x00,0x00,0x03,0xff,0xff, // 11
        0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff, // 12
        0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff, // 13
        0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff, // 14
        0xff,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff, // 15
        0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff, // 16
        0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 17
        0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 18
        0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 19
        0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 20
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 21
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 22
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 23
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 24
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 25
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 26
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 27
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 28
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 29
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 30
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 31
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 32
        0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xff, // 33
        0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff, // 34
        0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff, // 35
        0xfe,0x00,0x07,0xf0,0x00,0x00,0x7f,0x80,0x00,0x0f,0xf0,0x00,0x7f, // 36
        0xfc,0x00,0x3f,0xfe,0x00,0x03,0xff,0xf0,0x00,0x3f,0xfc,0x00,0x3f, // 37
        0xf8,0x00,0x7f,0xff,0x00,0x07,0xff,0xf8,0x00,0x7f,0xfe,0x00,0x1f, // 38
        0xf0,0x01,0xff,0xff,0x80,0x0f,0xff,0xfc,0x00,0xff,0xff,0x00,0x0f, // 39
        0xf0,0x01,0xfc,0x1f,0xc0,0x1f,0xc0,0xfe,0x01,0xfc,0x3f,0x00,0x07, // 40
        0xe0,0x03,0xf0,0x07,0xe0,0x3f,0x00,0x3f,0x01,0xf0,0x1f,0x80,0x07, // 41
        0xc0,0x07,0xe0,0x03,0xe0,0x7e,0x00,0x1f,0x81,0xf0,0x0f,0x80,0x03, // 42
        0xc0,0x07,0xc0,0x03,0xf0,0x7c,0x00,0x0f,0x81,0xe0,0x0f,0x80,0x03, // 43
        0xc0,0x07,0xc0,0x01,0xe0,0x7c,0x00,0x0f,0x81,0xe0,0x0f,0x80,0x01, // 44
        0x80,0x0f,0xc0,0x00,0xe0,0xfc,0x00,0x0f,0xc1,0xc0,0x0f,0x80,0x01, // 45
        0x80,0x0f,0x80,0x00,0x00,0xf8,0x00,0x07,0xc0,0x00,0x1f,0x80,0x01, // 46
        0x80,0x0f,0x80,0x00,0x00,0xf8,0x00,0x07,0xc0,0x00,0x1f,0x00,0x00, // 47
        0x80,0x0f,0x80,0x00,0x00,0xf8,0x00,0x07,0xc0,0x00,0x3f,0x00,0x00, // 48
        0x00,0x0f,0x80,0x00,0x00,0xf8,0x00,0x07,0xc0,0x00,0x7e,0x00,0x00, // 49
        0x00,0x0f,0x80,0x00,0x00,0xf8,0x00,0x07,0xc0,0x00,0xfc,0x00,0x00, // 50
        0x00,0x0f,0x80,0x00,0x00,0xf8,0x00,0x07,0xc0,0x03,0xf8,0x00,0x00, // 51
        0x00,0x0f,0x80,0x00,0xe0,0xf8,0x00,0x07,0xc0,0x07,0xf0,0x00,0x00, // 52
        0x80,0x0f,0x80,0x01,0xe0,0xfc,0x00,0x0f,0xc0,0x0f,0xc0,0x00,0x00, // 53
        0x80,0x07,0xc0,0x01,0xf0,0x7c,0x00,0x0f,0x80,0x1f,0x80,0x00,0x00, // 54
        0x80,0x07,0xc0,0x03,0xf0,0x7c,0x00,0x0f,0x80,0x3f,0x00,0x00,0x01, // 55
        0x80,0x07,0xe0,0x03,0xe0,0x7e,0x00,0x1f,0x80,0x7e,0x00,0x00,0x01, // 56
        0xc0,0x03,0xf0,0x07,0xe0,0x3f,0x00,0x3f,0x00,0xfc,0x00,0x00,0x01, // 57
        0xc0,0x03,0xf8,0x1f,0xc0,0x1f,0xc0,0xfe,0x01,0xf8,0x00,0x00,0x03, // 58
        0xe0,0x01,0xff,0xff,0x80,0x0f,0xff,0xfc,0x01,0xff,0xff,0x80,0x03, // 59
        0xe0,0x00,0xff,0xff,0x00,0x07,0xff,0xf8,0x01,0xff,0xff,0x80,0x07, // 60
        0xf0,0x00,0x3f,0xfe,0x00,0x03,0xff,0xf0,0x03,0xff,0xff,0x80,0x07, // 61
        0xf0,0x00,0x0f,0xf0,0x00,0x00,0x7f,0x80,0x00,0xff,0xff,0x80,0x0f, // 62
        0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f, // 63
        0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f, // 64
        0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f, // 65
        0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff, // 66
        0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff, // 67
        0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 68
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 69      
    };
    uint8_t co_bitmap[] = {
        //co
        //Image Name: CO.jpg ; Width: 104 ; Height: 69
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 1
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,0x00,0x7f,0xff,0xff,0xff, // 2
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x0f,0xff,0xff,0xff, // 3
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x03,0xff,0xff,0xff, // 4
        0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x00,0xff,0xff,0xff, // 5
        0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x00,0x00,0x3f,0xff,0xff, // 6
        0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x1f,0xff,0xff, // 7
        0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x00,0x00,0x0f,0xff,0xff, // 8
        0xff,0xff,0xff,0xf8,0x00,0x7f,0x80,0x00,0x00,0x00,0x07,0xff,0xff, // 9
        0xff,0xff,0xff,0xe0,0x00,0x0f,0x00,0x00,0x00,0x00,0x03,0xff,0xff, // 10
        0xff,0xff,0xff,0x80,0x00,0x06,0x00,0x00,0x00,0x00,0x03,0xff,0xff, // 11
        0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff, // 12
        0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff, // 13
        0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff, // 14
        0xff,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff, // 15
        0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff, // 16
        0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 17
        0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 18
        0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 19
        0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 20
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 21
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 22
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 23
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 24
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 25
        0xff,0xfe,0x00,0x01,0xfe,0x00,0x00,0x00,0xff,0xc0,0x00,0x1f,0xff, // 26
        0xff,0xfe,0x00,0x0f,0xff,0xc0,0x00,0x07,0xff,0xf8,0x00,0x1f,0xff, // 27
        0xff,0xfe,0x00,0x3f,0xff,0xf0,0x00,0x0f,0xff,0xfc,0x00,0x1f,0xff, // 28
        0xff,0xfe,0x00,0x7f,0xff,0xf8,0x00,0x3f,0xff,0xff,0x00,0x1f,0xff, // 29
        0xff,0xfe,0x00,0xff,0xff,0xfc,0x00,0x7f,0xff,0xff,0x80,0x1f,0xff, // 30
        0xff,0xfe,0x01,0xff,0x03,0xfe,0x00,0xff,0xc0,0xff,0xc0,0x3f,0xff, // 31
        0xff,0xfe,0x03,0xfc,0x00,0xff,0x00,0xff,0x00,0x3f,0xc0,0x3f,0xff, // 32
        0xff,0xf8,0x03,0xf8,0x00,0x7f,0x01,0xfe,0x00,0x1f,0xe0,0x0f,0xff, // 33
        0xff,0xe0,0x07,0xf0,0x00,0x3f,0x01,0xfc,0x00,0x0f,0xe0,0x03,0xff, // 34
        0xff,0x80,0x07,0xf0,0x00,0x3f,0x83,0xf8,0x00,0x07,0xf0,0x00,0xff, // 35
        0xfe,0x00,0x07,0xe0,0x00,0x1f,0x03,0xf8,0x00,0x07,0xf0,0x00,0x7f, // 36
        0xfc,0x00,0x07,0xe0,0x00,0x0f,0x03,0xf8,0x00,0x07,0xf0,0x00,0x3f, // 37
        0xf8,0x00,0x0f,0xc0,0x00,0x00,0x07,0xf0,0x00,0x03,0xf8,0x00,0x1f, // 38
        0xf0,0x00,0x0f,0xc0,0x00,0x00,0x07,0xf0,0x00,0x03,0xf8,0x00,0x0f, // 39
        0xf0,0x00,0x0f,0xc0,0x00,0x00,0x07,0xf0,0x00,0x03,0xf8,0x00,0x07, // 40
        0xe0,0x00,0x0f,0xc0,0x00,0x00,0x07,0xf0,0x00,0x03,0xf8,0x00,0x07, // 41
        0xc0,0x00,0x0f,0xc0,0x00,0x00,0x07,0xf0,0x00,0x03,0xf8,0x00,0x03, // 42
        0xc0,0x00,0x0f,0xc0,0x00,0x00,0x07,0xf0,0x00,0x03,0xf8,0x00,0x03, // 43
        0xc0,0x00,0x0f,0xc0,0x00,0x00,0x07,0xf0,0x00,0x03,0xf8,0x00,0x01, // 44
        0x80,0x00,0x0f,0xc0,0x00,0x00,0x07,0xf0,0x00,0x03,0xf8,0x00,0x01, // 45
        0x80,0x00,0x0f,0xc0,0x00,0x0f,0x07,0xf0,0x00,0x03,0xf8,0x00,0x01, // 46
        0x80,0x00,0x0f,0xe0,0x00,0x1f,0x03,0xf8,0x00,0x07,0xf0,0x00,0x00, // 47
        0x80,0x00,0x07,0xe0,0x00,0x1f,0x83,0xf8,0x00,0x07,0xf0,0x00,0x00, // 48
        0x00,0x00,0x07,0xe0,0x00,0x3f,0x83,0xfc,0x00,0x0f,0xf0,0x00,0x00, // 49
        0x00,0x00,0x07,0xf0,0x00,0x3f,0x01,0xfc,0x00,0x0f,0xe0,0x00,0x00, // 50
        0x00,0x00,0x03,0xf8,0x00,0x7f,0x01,0xfe,0x00,0x1f,0xe0,0x00,0x00, // 51
        0x00,0x00,0x03,0xfc,0x00,0xfe,0x00,0xff,0x00,0x3f,0xc0,0x00,0x00, // 52
        0x80,0x00,0x01,0xff,0x03,0xfe,0x00,0xff,0xc0,0xff,0xc0,0x00,0x00, // 53
        0x80,0x00,0x00,0xff,0xff,0xfc,0x00,0x7f,0xff,0xff,0x80,0x00,0x00, // 54
        0x80,0x00,0x00,0x7f,0xff,0xf8,0x00,0x3f,0xff,0xff,0x00,0x00,0x01, // 55
        0x80,0x00,0x00,0x3f,0xff,0xf0,0x00,0x0f,0xff,0xfc,0x00,0x00,0x01, // 56
        0xc0,0x00,0x00,0x1f,0xff,0xc0,0x00,0x07,0xff,0xf8,0x00,0x00,0x01, // 57
        0xc0,0x00,0x00,0x03,0xfe,0x00,0x00,0x00,0xff,0xc0,0x00,0x00,0x03, // 58
        0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03, // 59
        0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07, // 60
        0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07, // 61
        0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f, // 62
        0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f, // 63
        0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f, // 64
        0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f, // 65
        0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff, // 66
        0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff, // 67
        0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 68
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 69
    };
    uint8_t nox_bitmap[] = {
        //nox
        //Image Name: nox.jpg ; Width: 104 ; Height: 69
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 1
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,0x00,0x7f,0xff,0xff,0xff, // 2
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x0f,0xff,0xff,0xff, // 3
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x03,0xff,0xff,0xff, // 4
        0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x00,0xff,0xff,0xff, // 5
        0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x00,0x00,0x3f,0xff,0xff, // 6
        0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x1f,0xff,0xff, // 7
        0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x00,0x00,0x0f,0xff,0xff, // 8
        0xff,0xff,0xff,0xf8,0x00,0x7f,0x80,0x00,0x00,0x00,0x07,0xff,0xff, // 9
        0xff,0xff,0xff,0xe0,0x00,0x0f,0x00,0x00,0x00,0x00,0x03,0xff,0xff, // 10
        0xff,0xff,0xff,0x80,0x00,0x06,0x00,0x00,0x00,0x00,0x03,0xff,0xff, // 11
        0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff, // 12
        0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff, // 13
        0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff, // 14
        0xff,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff, // 15
        0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff, // 16
        0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 17
        0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 18
        0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 19
        0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 20
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 21
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 22
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 23
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 24
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 25
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 26
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 27
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 28
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 29
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 30
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 31
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 32
        0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xff, // 33
        0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff, // 34
        0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff, // 35
        0xfe,0x00,0xf0,0x00,0x38,0x00,0x0f,0xf0,0x00,0xe0,0x01,0xc0,0x7f, // 36
        0xfc,0x01,0xf8,0x00,0x7c,0x00,0x7f,0xfe,0x01,0xf0,0x03,0xc0,0x3f, // 37
        0xf8,0x01,0xfc,0x00,0x7c,0x00,0xff,0xff,0x01,0xf0,0x07,0xe0,0x1f, // 38
        0xf0,0x01,0xfc,0x00,0x7c,0x01,0xff,0xff,0x81,0xf8,0x0f,0xc0,0x0f, // 39
        0xf0,0x01,0xfe,0x00,0x7c,0x03,0xf8,0x1f,0xc0,0xfc,0x0f,0xc0,0x07, // 40
        0xe0,0x01,0xff,0x00,0x7c,0x07,0xe0,0x07,0xe0,0xfc,0x1f,0x80,0x07, // 41
        0xc0,0x01,0xff,0x00,0x7c,0x0f,0xc0,0x03,0xf0,0x7e,0x3f,0x00,0x03, // 42
        0xc0,0x01,0xff,0x80,0x7c,0x0f,0x80,0x01,0xf0,0x3f,0x3f,0x00,0x03, // 43
        0xc0,0x01,0xff,0xc0,0x7c,0x0f,0x80,0x01,0xf0,0x3f,0x7e,0x00,0x01, // 44
        0x80,0x01,0xf7,0xc0,0x7c,0x1f,0x80,0x01,0xf8,0x1f,0xfc,0x00,0x01, // 45
        0x80,0x01,0xf3,0xe0,0x7c,0x1f,0x00,0x00,0xf8,0x0f,0xfc,0x00,0x01, // 46
        0x80,0x01,0xf3,0xf0,0x7c,0x1f,0x00,0x00,0xf8,0x0f,0xf8,0x00,0x00, // 47
        0x80,0x01,0xf1,0xf0,0x7c,0x1f,0x00,0x00,0xf8,0x07,0xf0,0x00,0x00, // 48
        0x00,0x01,0xf0,0xf8,0x7c,0x1f,0x00,0x00,0xf8,0x07,0xf0,0x00,0x00, // 49
        0x00,0x01,0xf0,0xfc,0x7c,0x1f,0x00,0x00,0xf8,0x0f,0xf8,0x00,0x00, // 50
        0x00,0x01,0xf0,0x7e,0x7c,0x1f,0x00,0x00,0xf8,0x1f,0xfc,0x00,0x00, // 51
        0x00,0x01,0xf0,0x3e,0x7c,0x1f,0x00,0x00,0xf8,0x1f,0xfc,0x00,0x00, // 52
        0x80,0x01,0xf0,0x3f,0x7c,0x1f,0x80,0x01,0xf8,0x3f,0x7e,0x00,0x00, // 53
        0x80,0x01,0xf0,0x1f,0xfc,0x0f,0x80,0x01,0xf0,0x7f,0x3f,0x00,0x00, // 54
        0x80,0x01,0xf0,0x0f,0xfc,0x0f,0x80,0x01,0xf0,0x7e,0x3f,0x00,0x01, // 55
        0x80,0x01,0xf0,0x0f,0xfc,0x0f,0xc0,0x03,0xf0,0xfc,0x1f,0x80,0x01, // 56
        0xc0,0x01,0xf0,0x07,0xfc,0x07,0xe0,0x07,0xe1,0xfc,0x1f,0xc0,0x01, // 57
        0xc0,0x01,0xf0,0x03,0xfc,0x03,0xf8,0x1f,0xc1,0xf8,0x0f,0xc0,0x03, // 58
        0xe0,0x01,0xf0,0x01,0xfc,0x01,0xff,0xff,0x83,0xf0,0x07,0xe0,0x03, // 59
        0xe0,0x01,0xf0,0x01,0xfc,0x00,0xff,0xff,0x03,0xf0,0x07,0xe0,0x07, // 60
        0xf0,0x01,0xf0,0x00,0xfc,0x00,0x7f,0xfe,0x03,0xe0,0x03,0xe0,0x07, // 61
        0xf0,0x00,0xe0,0x00,0x78,0x00,0x0f,0xf0,0x01,0xc0,0x01,0xc0,0x0f, // 62
        0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f, // 63
        0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f, // 64
        0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f, // 65
        0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff, // 66
        0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff, // 67
        0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 68
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 69
    };
    uint8_t voc_bitmap[] = {
        //vocs
        //Image Name: voc.jpg ; Width: 104 ; Height: 69
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 1
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,0x00,0x7f,0xff,0xff,0xff, // 2
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x0f,0xff,0xff,0xff, // 3
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x03,0xff,0xff,0xff, // 4
        0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x00,0xff,0xff,0xff, // 5
        0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x00,0x00,0x3f,0xff,0xff, // 6
        0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x1f,0xff,0xff, // 7
        0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x00,0x00,0x0f,0xff,0xff, // 8
        0xff,0xff,0xff,0xf8,0x00,0x7f,0x80,0x00,0x00,0x00,0x07,0xff,0xff, // 9
        0xff,0xff,0xff,0xe0,0x00,0x0f,0x00,0x00,0x00,0x00,0x03,0xff,0xff, // 10
        0xff,0xff,0xff,0x80,0x00,0x06,0x00,0x00,0x00,0x00,0x03,0xff,0xff, // 11
        0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff, // 12
        0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff, // 13
        0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff, // 14
        0xff,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff, // 15
        0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff, // 16
        0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 17
        0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 18
        0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 19
        0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 20
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 21
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 22
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 23
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 24
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 25
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 26
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 27
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 28
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 29
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 30
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 31
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 32
        0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xff, // 33
        0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff, // 34
        0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff, // 35
        0xfe,0x01,0xc0,0x00,0x38,0x00,0x3f,0xc0,0x00,0x01,0xfc,0x00,0x7f, // 36
        0xfc,0x03,0xe0,0x00,0x7c,0x01,0xff,0xf8,0x00,0x0f,0xff,0x80,0x3f, // 37
        0xf8,0x03,0xf0,0x00,0x7c,0x03,0xff,0xfc,0x00,0x1f,0xff,0xc0,0x1f, // 38
        0xf0,0x03,0xf0,0x00,0xfc,0x07,0xff,0xfe,0x00,0x7f,0xff,0xe0,0x0f, // 39
        0xf0,0x01,0xf0,0x00,0xf8,0x0f,0xe0,0x7f,0x00,0x7f,0x07,0xf0,0x07, // 40
        0xe0,0x01,0xf8,0x00,0xf8,0x1f,0x80,0x1f,0x80,0xfc,0x01,0xf8,0x07, // 41
        0xc0,0x01,0xf8,0x01,0xf8,0x3f,0x00,0x0f,0xc1,0xf8,0x00,0xf8,0x03, // 42
        0xc0,0x00,0xf8,0x01,0xf0,0x3e,0x00,0x07,0xc1,0xf0,0x00,0xfc,0x03, // 43
        0xc0,0x00,0xfc,0x01,0xf0,0x3e,0x00,0x07,0xc1,0xf0,0x00,0x78,0x01, // 44
        0x80,0x00,0xfc,0x03,0xf0,0x7e,0x00,0x07,0xe3,0xf0,0x00,0x38,0x01, // 45
        0x80,0x00,0x7c,0x03,0xe0,0x7c,0x00,0x03,0xe3,0xe0,0x00,0x00,0x01, // 46
        0x80,0x00,0x7e,0x07,0xe0,0x7c,0x00,0x03,0xe3,0xe0,0x00,0x00,0x00, // 47
        0x80,0x00,0x3e,0x07,0xc0,0x7c,0x00,0x03,0xe3,0xe0,0x00,0x00,0x00, // 48
        0x00,0x00,0x3e,0x07,0xc0,0x7c,0x00,0x03,0xe3,0xe0,0x00,0x00,0x00, // 49
        0x00,0x00,0x3f,0x0f,0xc0,0x7c,0x00,0x03,0xe3,0xe0,0x00,0x00,0x00, // 50
        0x00,0x00,0x1f,0x0f,0x80,0x7c,0x00,0x03,0xe3,0xe0,0x00,0x00,0x00, // 51
        0x00,0x00,0x1f,0x8f,0x80,0x7c,0x00,0x03,0xe3,0xe0,0x00,0x38,0x00, // 52
        0x80,0x00,0x0f,0x9f,0x00,0x7e,0x00,0x07,0xe3,0xe0,0x00,0x78,0x00, // 53
        0x80,0x00,0x0f,0x9f,0x00,0x3e,0x00,0x07,0xc1,0xf0,0x00,0x7c,0x00, // 54
        0x80,0x00,0x0f,0xdf,0x00,0x3e,0x00,0x07,0xc1,0xf0,0x00,0xfc,0x01, // 55
        0x80,0x00,0x07,0xfe,0x00,0x3f,0x00,0x0f,0xc1,0xf8,0x00,0xf8,0x01, // 56
        0xc0,0x00,0x07,0xfe,0x00,0x1f,0x80,0x1f,0x80,0xfc,0x01,0xf8,0x01, // 57
        0xc0,0x00,0x07,0xfc,0x00,0x0f,0xe0,0x7f,0x00,0xfe,0x07,0xf0,0x03, // 58
        0xe0,0x00,0x03,0xfc,0x00,0x07,0xff,0xfe,0x00,0x7f,0xff,0xe0,0x03, // 59
        0xe0,0x00,0x03,0xfc,0x00,0x03,0xff,0xfc,0x00,0x3f,0xff,0xc0,0x07, // 60
        0xf0,0x00,0x01,0xf8,0x00,0x01,0xff,0xf8,0x00,0x0f,0xff,0x80,0x07, // 61
        0xf0,0x00,0x00,0xf0,0x00,0x00,0x3f,0xc0,0x00,0x03,0xfc,0x00,0x0f, // 62
        0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f, // 63
        0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f, // 64
        0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f, // 65
        0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff, // 66
        0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff, // 67
        0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 68
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 69
    };
    uint8_t particles_bitmap[] = {
        //Image Name: particles.jpg ; Width: 104 ; Height: 69
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 1
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 2
        0xff,0xff,0xff,0xff,0xff,0x80,0x1f,0xff,0x8f,0xc3,0xff,0xff,0xff, // 3
        0xff,0xff,0xff,0xff,0xfe,0x00,0x03,0xff,0x07,0x81,0xff,0xff,0xff, // 4
        0xff,0xff,0xff,0xff,0xf8,0x00,0x01,0xfe,0x07,0x81,0xff,0xff,0xff, // 5
        0xff,0xff,0xff,0xff,0xf0,0x3f,0xc0,0x7e,0x07,0x81,0xff,0xff,0xff, // 6
        0xff,0xff,0xff,0xff,0xe0,0xff,0xf8,0x3f,0x07,0xc3,0xff,0xff,0xff, // 7
        0xff,0xff,0xff,0xff,0xc3,0xff,0xfc,0x1f,0x9f,0xff,0xff,0xff,0xff, // 8
        0xff,0xff,0xff,0xff,0x87,0xff,0xfe,0x1f,0xff,0xff,0xff,0xff,0xff, // 9
        0xff,0xff,0xff,0xff,0x0f,0xfe,0x3f,0x0f,0xff,0xff,0xff,0xff,0xff, // 10
        0xff,0xff,0xff,0xff,0x1f,0xfc,0x1f,0x87,0xff,0xff,0xff,0xff,0xff, // 11
        0xff,0xff,0xff,0xfe,0x1f,0xfc,0x1f,0xc0,0x1f,0xff,0xff,0xff,0xff, // 12
        0xff,0xff,0xff,0xfe,0x3f,0xfc,0x1f,0xc0,0x07,0xff,0xff,0xff,0xff, // 13
        0xff,0xff,0xff,0xfe,0x3f,0xfc,0x1f,0xc0,0x01,0xff,0xff,0xff,0xff, // 14
        0xff,0xff,0xff,0xfc,0x3f,0xff,0x7f,0xe1,0x80,0xff,0xff,0xff,0xff, // 15
        0xff,0xff,0xff,0xfc,0x7f,0xff,0xff,0xef,0xf0,0x7f,0xff,0xff,0xff, // 16
        0xff,0xff,0xff,0xfc,0x7f,0xff,0xff,0xff,0xf8,0x3f,0xff,0xff,0xff, // 17
        0xff,0xff,0xff,0xfc,0x7f,0xff,0xff,0xff,0xfc,0x3f,0xff,0xff,0xff, // 18
        0xff,0xff,0xff,0x80,0x7f,0x87,0xff,0xff,0xfe,0x1f,0xff,0xff,0xff, // 19
        0xff,0xff,0xfe,0x00,0x7f,0x03,0xff,0xff,0xff,0x1f,0x1f,0xff,0xff, // 20
        0xff,0xff,0xfc,0x00,0x7f,0x03,0xff,0xfe,0xff,0x1e,0x0f,0xff,0xff, // 21
        0xff,0xff,0xf8,0x1f,0xff,0x07,0xff,0xf8,0x3f,0x1e,0x07,0xff,0xff, // 22
        0xff,0xff,0xf0,0x7f,0xff,0x87,0xff,0xf8,0x3f,0x1e,0x0f,0xff,0xff, // 23
        0xff,0xff,0xe1,0xff,0xff,0xff,0xff,0xf8,0x3f,0x1f,0x0f,0xff,0xff, // 24
        0xff,0xff,0xc3,0xff,0xff,0xff,0xdf,0xf8,0x3f,0x1f,0xff,0xff,0xff, // 25
        0xff,0xff,0xc3,0xff,0xff,0xff,0x07,0xfc,0x7f,0x0f,0xff,0xff,0xff, // 26
        0xff,0xff,0x87,0x8f,0xff,0xff,0x07,0xff,0xfe,0x03,0xff,0xff,0xff, // 27
        0xff,0xff,0x8f,0x07,0xff,0xff,0x07,0xff,0xfe,0x00,0xff,0xff,0xff, // 28
        0xff,0xff,0x8f,0x07,0xff,0xff,0x07,0xff,0xff,0xc0,0x7f,0xff,0xff, // 29
        0xff,0xff,0x0f,0x07,0xff,0xff,0x8f,0xff,0xff,0xf8,0x3f,0xff,0xff, // 30
        0xff,0xff,0x1f,0x07,0xf1,0xff,0xff,0xff,0xff,0xfc,0x1f,0xff,0xff, // 31
        0xff,0xff,0x1f,0x8f,0xe0,0xff,0xff,0xff,0xff,0xff,0x1f,0xff,0xff, // 32
        0xff,0xff,0x1f,0xff,0xe0,0xff,0xff,0xff,0xff,0xff,0x0f,0xff,0xff, // 33
        0xff,0xff,0x1f,0xff,0xe0,0xff,0xff,0xff,0xff,0xff,0x8f,0xff,0xff, // 34
        0xff,0xff,0x1f,0xff,0xe0,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0xff, // 35
        0xff,0xff,0x0f,0xff,0xf1,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0xff, // 36
        0xff,0xff,0x8f,0xff,0xff,0xff,0xff,0xff,0xfc,0x7f,0xc7,0xff,0xff, // 37
        0xff,0xff,0x87,0xff,0xff,0xff,0xff,0xff,0xf8,0x3f,0xc7,0xff,0xff, // 38
        0xff,0xff,0x87,0xff,0xff,0xff,0xff,0xff,0xf8,0x3f,0xc7,0xff,0xff, // 39
        0xff,0xff,0xc3,0xff,0xff,0xff,0xc7,0xff,0xf8,0x3f,0x87,0xff,0xff, // 40
        0xff,0xff,0xe1,0xff,0xff,0xff,0x83,0xff,0xf8,0x3f,0x87,0xff,0xff, // 41
        0xff,0xff,0xe0,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0x8f,0xff,0xff, // 42
        0xff,0xff,0xf0,0x7f,0xff,0xff,0x83,0xff,0xff,0xff,0x0f,0xff,0xff, // 43
        0xff,0xff,0xf8,0x0f,0xfe,0x3f,0x83,0xff,0xff,0xfe,0x1f,0xff,0xff, // 44
        0xff,0xff,0xfe,0x00,0x7c,0x1f,0xef,0xff,0xff,0xfc,0x1f,0xff,0xff, // 45
        0xff,0xff,0xff,0x00,0x7c,0x1f,0xff,0xff,0xff,0xf8,0x3f,0xff,0xff, // 46
        0xff,0xff,0xff,0xe0,0x7c,0x1f,0xff,0xff,0xff,0xc0,0x7f,0xff,0xff, // 47
        0xff,0xff,0xff,0xf8,0xfc,0x1f,0xff,0xff,0xff,0xc0,0xff,0xff,0xff, // 48
        0xff,0xff,0xff,0xf8,0xfe,0x3f,0xff,0xff,0xff,0xe3,0xff,0xff,0xff, // 49
        0xff,0xff,0xff,0xf8,0x7f,0xff,0xff,0xff,0xff,0xe3,0xff,0xff,0xff, // 50
        0xff,0xff,0xfc,0x78,0x7f,0xff,0xff,0xff,0xff,0xe3,0xff,0xff,0xff, // 51
        0xff,0xff,0xf8,0x3c,0x7f,0xff,0xff,0xff,0xff,0xe3,0xff,0xff,0xff, // 52
        0xff,0xff,0xf8,0x3c,0x3f,0xff,0xff,0xff,0xff,0xe3,0xff,0xff,0xff, // 53
        0xff,0xff,0xf8,0x3e,0x3f,0xff,0x7f,0xff,0xff,0xe3,0xff,0xff,0xff, // 54
        0xff,0xff,0xf8,0x3e,0x1f,0xfe,0x7f,0xff,0xff,0xe3,0xff,0xff,0xff, // 55
        0xff,0xff,0xfe,0x7f,0x07,0xf8,0x7f,0xf8,0x7f,0xc3,0xff,0xff,0xff, // 56
        0xff,0xff,0xff,0xff,0x81,0xe0,0x3f,0xf8,0x3f,0xc3,0xff,0xff,0xff, // 57
        0xff,0xff,0xff,0xff,0xc0,0x00,0x3f,0xf8,0x3f,0xc7,0xff,0xff,0xff, // 58
        0xff,0xff,0xff,0xff,0xe0,0x00,0x1f,0xf8,0x3f,0x87,0xff,0xff,0xff, // 59
        0xff,0xff,0xff,0xff,0xfc,0x0f,0x1f,0xf8,0x7f,0x0f,0xff,0xff,0xff, // 60
        0xff,0xfe,0x3f,0xff,0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0xff, // 61
        0xff,0xfc,0x1f,0xff,0xff,0xff,0x87,0xff,0xfe,0x1f,0xff,0xff,0xff, // 62
        0xff,0xfc,0x1f,0xf1,0xff,0xff,0xc1,0xff,0xf8,0x3f,0xff,0xff,0xff, // 63
        0xff,0xfc,0x1f,0xe0,0xff,0xc7,0xe0,0xff,0xe0,0x7f,0xff,0xff,0xff, // 64
        0xff,0xfc,0x1f,0xc0,0xff,0x83,0xf0,0x0f,0x00,0xff,0xff,0xff,0xff, // 65
        0xff,0xfe,0x3f,0xc0,0xff,0x03,0xf8,0x00,0x03,0xff,0xff,0xff,0xff, // 66
        0xff,0xff,0xff,0xe1,0xff,0x03,0xfe,0x00,0x07,0xff,0xff,0xff,0xff, // 67
        0xff,0xff,0xff,0xf3,0xff,0x83,0xff,0xc0,0x3f,0xff,0xff,0xff,0xff, // 68
        0xff,0xff,0xff,0xff,0xff,0xcf,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 69
    };
    uint8_t temp_bitmap[] = {

    };
    uint8_t humidity_bitmap[] = {

    };
    uint8_t ch4_bitmap[] = {
        //Image Name: ch4.jpg ; Width: 104 ; Height: 69
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 1
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,0x00,0x7f,0xff,0xff,0xff, // 2
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x0f,0xff,0xff,0xff, // 3
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x03,0xff,0xff,0xff, // 4
        0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x00,0xff,0xff,0xff, // 5
        0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x00,0x00,0x3f,0xff,0xff, // 6
        0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x1f,0xff,0xff, // 7
        0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x00,0x00,0x0f,0xff,0xff, // 8
        0xff,0xff,0xff,0xf8,0x00,0x7f,0x80,0x00,0x00,0x00,0x07,0xff,0xff, // 9
        0xff,0xff,0xff,0xe0,0x00,0x0f,0x00,0x00,0x00,0x00,0x03,0xff,0xff, // 10
        0xff,0xff,0xff,0x80,0x00,0x06,0x00,0x00,0x00,0x00,0x03,0xff,0xff, // 11
        0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff, // 12
        0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff, // 13
        0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff, // 14
        0xff,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff, // 15
        0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff, // 16
        0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 17
        0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 18
        0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 19
        0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 20
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 21
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 22
        0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 23
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 24
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 25
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 26
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 27
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 28
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 29
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 30
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 31
        0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff, // 32
        0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xff, // 33
        0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff, // 34
        0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff, // 35
        0xfe,0x00,0x03,0xf8,0x00,0x1c,0x00,0x07,0x00,0x00,0xf0,0x00,0x7f, // 36
        0xfc,0x00,0x1f,0xff,0x00,0x3e,0x00,0x0f,0x80,0x01,0xf8,0x00,0x3f, // 37
        0xf8,0x00,0x3f,0xff,0x80,0x3e,0x00,0x0f,0x80,0x01,0xf8,0x00,0x1f, // 38
        0xf0,0x00,0xff,0xff,0xc0,0x3e,0x00,0x0f,0x80,0x03,0xf8,0x00,0x0f, // 39
        0xf0,0x00,0xfe,0x0f,0xe0,0x3e,0x00,0x0f,0x80,0x07,0xf8,0x00,0x07, // 40
        0xe0,0x01,0xf8,0x03,0xf0,0x3e,0x00,0x0f,0x80,0x0f,0xf8,0x00,0x07, // 41
        0xc0,0x03,0xf0,0x01,0xf0,0x3e,0x00,0x0f,0x80,0x0f,0xf8,0x00,0x03, // 42
        0xc0,0x03,0xe0,0x01,0xf8,0x3e,0x00,0x0f,0x80,0x1e,0xf8,0x00,0x03, // 43
        0xc0,0x03,0xe0,0x00,0xf0,0x3e,0x00,0x0f,0x80,0x3c,0xf8,0x00,0x01, // 44
        0x80,0x07,0xe0,0x00,0x70,0x3e,0x00,0x0f,0x80,0x78,0xf8,0x00,0x01, // 45
        0x80,0x07,0xc0,0x00,0x00,0x3e,0x00,0x0f,0x80,0xf8,0xf8,0x00,0x01, // 46
        0x80,0x07,0xc0,0x00,0x00,0x3f,0xff,0xff,0x80,0xf0,0xf8,0x00,0x00, // 47
        0x80,0x07,0xc0,0x00,0x00,0x3f,0xff,0xff,0x81,0xe0,0xf8,0x00,0x00, // 48
        0x00,0x07,0xc0,0x00,0x00,0x3f,0xff,0xff,0x83,0xe0,0xf8,0x00,0x00, // 49
        0x00,0x07,0xc0,0x00,0x00,0x3f,0xff,0xff,0x87,0xc0,0xf8,0x00,0x00, // 50
        0x00,0x07,0xc0,0x00,0x00,0x3e,0x00,0x0f,0x87,0x80,0xf8,0x00,0x00, // 51
        0x00,0x07,0xc0,0x00,0x70,0x3e,0x00,0x0f,0x8f,0x00,0xf8,0x00,0x00, // 52
        0x80,0x07,0xc0,0x00,0xf0,0x3e,0x00,0x0f,0x9f,0xff,0xff,0x00,0x00, // 53
        0x80,0x03,0xe0,0x00,0xf8,0x3e,0x00,0x0f,0x9f,0xff,0xff,0x80,0x00, // 54
        0x80,0x03,0xe0,0x01,0xf8,0x3e,0x00,0x0f,0x9f,0xff,0xff,0x80,0x01, // 55
        0x80,0x03,0xf0,0x01,0xf0,0x3e,0x00,0x0f,0x8f,0xff,0xff,0x00,0x01, // 56
        0xc0,0x01,0xf8,0x03,0xf0,0x3e,0x00,0x0f,0x80,0x00,0xf8,0x00,0x01, // 57
        0xc0,0x01,0xfc,0x0f,0xe0,0x3e,0x00,0x0f,0x80,0x00,0xf8,0x00,0x03, // 58
        0xe0,0x00,0xff,0xff,0xc0,0x3e,0x00,0x0f,0x80,0x00,0xf8,0x00,0x03, // 59
        0xe0,0x00,0x7f,0xff,0x80,0x3e,0x00,0x0f,0x80,0x00,0xf8,0x00,0x07, // 60
        0xf0,0x00,0x1f,0xff,0x00,0x3e,0x00,0x0f,0x80,0x00,0xf8,0x00,0x07, // 61
        0xf0,0x00,0x07,0xf8,0x00,0x1c,0x00,0x07,0x00,0x00,0x70,0x00,0x0f, // 62
        0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f, // 63
        0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f, // 64
        0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f, // 65
        0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff, // 66
        0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff, // 67
        0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff, // 68
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 69
    };
    uint8_t thermometer_bitmap[] = {
        //Image Name: thermometer.jpg ; Width: 48 ; Height: 70
        0xff,0xf8,0x1f,0xff,0xff,0xff, // 1
        0xff,0xe0,0x07,0xff,0xff,0xff, // 2
        0xff,0xc0,0x03,0xff,0xff,0xff, // 3
        0xff,0x87,0xe1,0xff,0xff,0xff, // 4
        0xff,0x0f,0xf8,0xff,0xff,0xff, // 5
        0xff,0x1f,0xfc,0x7e,0x53,0xff, // 6
        0xfe,0x3f,0xfc,0x78,0x01,0xff, // 7
        0xfe,0x3f,0xfe,0x38,0x01,0xff, // 8
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 9
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 10
        0xfe,0x7e,0x3e,0x3f,0xff,0xff, // 11
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 13
        0xfe,0x7e,0x3e,0x3f,0xff,0xff, // 14
        0xfe,0x7e,0x7e,0x38,0x0f,0xff, // 15
        0xfe,0x7e,0x3e,0x38,0x07,0xff, // 16
        0xfe,0x7e,0x7e,0x3d,0x5f,0xff, // 17
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 18
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 19
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 20
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 21
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 22
        0xfe,0x7e,0x7e,0x38,0x01,0xff, // 23
        0xfe,0x7e,0x7e,0x30,0x01,0xff, // 24
        0xfe,0x7e,0x7e,0x38,0x01,0xff, // 25
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 26
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 27
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 28
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 29
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 30
        0xfe,0x7e,0x7e,0x38,0x0f,0xff, // 31
        0xfe,0x7e,0x7e,0x30,0x07,0xff, // 32
        0xfe,0x7e,0x7e,0x38,0x0f,0xff, // 33
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 34
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 35
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 36
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 37
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 38
        0xfe,0x7e,0x7e,0x38,0x03,0xff, // 39
        0xfe,0x7e,0x7e,0x30,0x01,0xff, // 40
        0xfe,0x7e,0x3e,0x38,0x01,0xff, // 41
        0xfe,0x7e,0x7e,0x3f,0xff,0xff, // 42
        0xfe,0x7e,0x3e,0x3f,0xff,0xff, // 43
        0xfc,0x7e,0x3e,0x3f,0xff,0xff, // 44
        0xf8,0x7e,0x7e,0x1f,0xff,0xff, // 45
        0xf8,0xfe,0x3f,0x0f,0xff,0xff, // 46
        0xf1,0xfe,0x3f,0x87,0xff,0xff, // 47
        0xe3,0xfe,0x7f,0xc7,0xff,0xff, // 48
        0xe3,0xfc,0x3f,0xe3,0xff,0xff, // 49
        0xc7,0xf0,0x0f,0xe3,0xff,0xff, // 50
        0xc7,0xe0,0x07,0xf3,0xff,0xff, // 51
        0x8f,0xc0,0x03,0xf1,0xff,0xff, // 52
        0x8f,0xc0,0x03,0xf1,0xff,0xff, // 53
        0x8f,0xc0,0x01,0xf1,0xff,0xff, // 54
        0x8f,0x80,0x01,0xf9,0xff,0xff, // 55
        0x8f,0x80,0x01,0xf9,0xff,0xff, // 56
        0x8f,0x80,0x01,0xf1,0xff,0xff, // 57
        0x8f,0xc0,0x03,0xf1,0xff,0xff, // 58
        0x8f,0xc0,0x03,0xf1,0xff,0xff, // 59
        0xc7,0xe0,0x07,0xf1,0xff,0xff, // 60
        0xc7,0xf0,0x0f,0xe3,0xff,0xff, // 61
        0xe3,0xfc,0x3f,0xe3,0xff,0xff, // 62
        0xe3,0xff,0xff,0xc7,0xff,0xff, // 63
        0xf1,0xff,0xff,0x87,0xff,0xff, // 64
        0xf0,0xff,0xff,0x0f,0xff,0xff, // 65
        0xf8,0x3f,0xfe,0x1f,0xff,0xff, // 66
        0xfc,0x0f,0xf0,0x3f,0xff,0xff, // 67
        0xff,0x00,0x00,0x7f,0xff,0xff, // 68
        0xff,0xc0,0x01,0xff,0xff,0xff, // 69
        0xff,0xf0,0x0f,0xff,0xff,0xff, // 70
    };
    uint8_t droplet_bitmap[] = {
        // Image Name: droplet.jpg ; Width: 56 ; Height: 69
        0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 1
        0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 2
        0xff,0xff,0xff,0xff,0xfc,0xff,0xff, // 3
        0xff,0xff,0xff,0xff,0xfc,0xff,0xff, // 4
        0xff,0xff,0xff,0xff,0xf8,0x7f,0xff, // 5
        0xff,0xff,0xff,0xff,0xf0,0x3f,0xff, // 6
        0xff,0xff,0xff,0xff,0xf0,0x3f,0xff, // 7
        0xff,0xff,0xff,0xff,0xe0,0x1f,0xff, // 8
        0xff,0xff,0xff,0xff,0xe0,0x1f,0xff, // 9
        0xff,0xff,0xff,0xff,0xc0,0x0f,0xff, // 10
        0xff,0xff,0xff,0xff,0xc0,0x0f,0xff, // 11
        0xff,0xff,0xff,0xff,0xc0,0x07,0xff, // 12
        0xff,0xff,0xef,0xff,0x80,0x07,0xff, // 13
        0xff,0xff,0xe7,0xff,0x80,0x07,0xff, // 14
        0xff,0xff,0xc7,0xff,0x00,0x03,0xff, // 15
        0xff,0xff,0x83,0xff,0x00,0x03,0xff, // 16
        0xff,0xff,0x83,0xff,0x00,0x03,0xff, // 17
        0xff,0xff,0x01,0xff,0x80,0x03,0xff, // 18
        0xff,0xff,0x00,0xff,0x80,0x07,0xff, // 19
        0xff,0xfe,0x00,0xff,0x80,0x07,0xff, // 20
        0xff,0xfe,0x00,0x7f,0xc0,0x0f,0xff, // 21
        0xff,0xfc,0x00,0x7f,0xe0,0x1f,0xff, // 22
        0xff,0xfc,0x00,0x3f,0xff,0xff,0xff, // 23
        0xff,0xf8,0x00,0x3f,0xff,0xff,0xff, // 24
        0xff,0xf0,0x00,0x1f,0xff,0xff,0xff, // 25
        0xff,0xf0,0x00,0x1f,0xff,0xff,0xff, // 26
        0xff,0xe0,0x00,0x0f,0xff,0xff,0xff, // 27
        0xff,0xe0,0x00,0x0f,0xff,0xff,0xff, // 28
        0xff,0xc0,0x00,0x07,0xff,0xff,0xff, // 29
        0xff,0xc0,0x00,0x07,0xff,0xff,0xff, // 30
        0xff,0x80,0x00,0x03,0xff,0xff,0xff, // 31
        0xff,0x80,0x00,0x03,0xff,0xff,0xff, // 32
        0xff,0x00,0x00,0x01,0xff,0xff,0xff, // 33
        0xff,0x00,0x00,0x01,0xff,0xff,0xff, // 34
        0xfe,0x00,0x00,0x00,0xff,0xff,0xff, // 35
        0xfe,0x00,0x00,0x00,0xff,0xff,0xff, // 36
        0xfe,0x00,0x00,0x00,0x7f,0xff,0xff, // 37
        0xfc,0x00,0x00,0x00,0x7f,0xff,0xff, // 38
        0xfc,0x00,0x00,0x00,0x3f,0xff,0xff, // 39
        0xf8,0x00,0x00,0x00,0x3f,0xff,0xff, // 40
        0xf8,0x00,0x00,0x00,0x3f,0xff,0xff, // 41
        0xf0,0x00,0x00,0x00,0x1f,0xff,0xff, // 42
        0xf0,0x00,0x00,0x00,0x1f,0xff,0xff, // 43
        0xf0,0x00,0x00,0x00,0x0f,0xff,0xff, // 44
        0xe0,0x00,0x00,0x00,0x0f,0xff,0xff, // 45
        0xe0,0x00,0x00,0x00,0x0f,0xff,0xff, // 46
        0xe0,0x00,0x00,0x00,0x07,0xff,0xff, // 47
        0xe0,0x00,0x00,0x00,0x07,0xff,0xff, // 48
        0xc0,0x00,0x00,0x00,0x07,0xff,0xff, // 49
        0xc0,0x00,0x00,0x00,0x07,0xff,0xff, // 50
        0xc0,0x00,0x00,0x00,0x07,0xff,0xff, // 51
        0xc0,0x00,0x00,0x00,0x07,0xff,0xff, // 52
        0xc0,0x00,0x00,0x00,0x07,0xff,0xff, // 53
        0xc0,0x00,0x00,0x00,0x07,0xff,0xff, // 54
        0xe0,0x00,0x00,0x00,0x07,0xff,0xff, // 55
        0xe0,0x00,0x00,0x00,0x0f,0xff,0xff, // 56
        0xe0,0x00,0x00,0x00,0x0f,0xff,0xff, // 57
        0xf0,0x00,0x00,0x00,0x0f,0xff,0xff, // 58
        0xf0,0x00,0x00,0x00,0x1f,0xff,0xff, // 59
        0xf8,0x00,0x00,0x00,0x1f,0xff,0xff, // 60
        0xf8,0x00,0x00,0x00,0x3f,0xff,0xff, // 61
        0xfc,0x00,0x00,0x00,0x7f,0xff,0xff, // 62
        0xfe,0x00,0x00,0x00,0x7f,0xff,0xff, // 63
        0xff,0x00,0x00,0x00,0xff,0xff,0xff, // 64
        0xff,0x80,0x00,0x03,0xff,0xff,0xff, // 65
        0xff,0xc0,0x00,0x07,0xff,0xff,0xff, // 66
        0xff,0xf0,0x00,0x1f,0xff,0xff,0xff, // 67
        0xff,0xfe,0x00,0xff,0xff,0xff,0xff, // 68
        0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 69
    };
    
    uint8_t baseline_x;
    if(frameNumber == 1) baseline_x = 145;
    else baseline_x = 0;
    if(sensor == mySensor.co2) partialScreenBitmap(baseline_x+22, 10, co2_bitmap, 69, 104);
    if(sensor == mySensor.co) partialScreenBitmap(baseline_x+22, 10, co_bitmap, 69, 104);
    if(sensor == mySensor.nox) partialScreenBitmap(baseline_x+22, 10, nox_bitmap, 69, 104);
    if(sensor == mySensor.particles) partialScreenBitmap(baseline_x+22, 10, particles_bitmap, 69, 104);
    if(sensor == mySensor.humidity) partialScreenBitmap(baseline_x+22, 10, humidity_bitmap, 69, 104);
    if(sensor == mySensor.ch4) partialScreenBitmap(baseline_x+22, 10, ch4_bitmap, 69, 104);
    if(sensor == mySensor.temperature || sensor == mySensor.humidity) {
        partialScreenBitmap(baseline_x+3, 3, thermometer_bitmap, 70, 48);
        partialScreenBitmap(baseline_x+3, 80, droplet_bitmap, 69, 56);
    }

    

    // if(frameNumber) baseline_x = 145;
    // partialScreenBitmap(baseline_x+22, 10, icons[sensor], 104, 69);
    // if(sensor =  mySensor.temperature) partialScreenBitmap(baseline_x+22, 80, icons[8], 48, 70);
    // if(sensor = mySensor.humidity) partialScreenBitmap(baseline_x+22, 80, icons[9], 48, 70);
}

void hV_Screen_Buffer::clearFrame(uint8_t frame) {
    for(int i = 0; i < 148; i++){ 
        for(int j = 0; j < 152; j++) {
            if(frame) point(j+148, i, myColours.white);
            else point(j, i, myColours.white);
        }
    }
}

void hV_Screen_Buffer::firmwareUpdateScreen(uint8_t percent) {
    setPenSolid(false);
    dRectangle(49, 80, 202, 50, myColours.black);
    setPenSolid(true);
    dRectangle(49, 80, percent*2, 50, myColours.black);
    // x_location += i*34;
    // partialScreenBitmap(x_location, y_location, bigTuffy[currentChar], 50, 32);
    drawText(3, 3, 4, "Updating...");
}

void hV_Screen_Buffer::updateFrameVal(uint8_t frameNumber, uint8_t sensor, String sensorReading) {
    // clearFrame(frameNumber);
    uint16_t baseline_x;
    if(frameNumber == 1) baseline_x = 148;
    else baseline_x = 0;
    if(sensorReading.length() == 2) baseline_x += 16;
    if(sensorReading.length() == 1) baseline_x += 48;
    if(sensorReading.length() > 3) baseline_x += 4;
    if(sensor == mySensor.humidity) drawNumBig(sensorReading, baseline_x+39, 90);
    else if (sensor == mySensor.temperature) drawNumBig(sensorReading, baseline_x+39, 3);
    else drawNumBig(sensorReading, baseline_x+22, 90);
}

void hV_Screen_Buffer::gText(uint16_t x0, uint16_t y0, String text, uint16_t textColour, uint16_t backColour)
#if (FONT_MODE == USE_FONT_TERMINAL)
{
    uint8_t c;
    uint8_t line, line1, line2, line3;
    uint16_t x, y;
    uint8_t i, j, k;
#if (MAX_FONT_SIZE > 0)
    if (f_fontSize == 0)
    {
        for (k = 0; k < text.length(); k++)
        {
            c = text.charAt(k) - ' ';

            for (i = 0; i < 6; i++)
            {
                line = f_getCharacter(c, i);

                for (j = 0; j < 8; j++)
                {
                    if (bitRead(line, j))
                    {
                        point(x0 + 6 * k + i, y0 + j, textColour);
                    }
                    else if (f_fontSolid)
                    {
                        point(x0 + 6 * k + i, y0 + j, backColour);
                    }
                }
            }
        }
    }
#if (MAX_FONT_SIZE > 1)
    else if (f_fontSize == 1)
    {
        for (k = 0; k < text.length(); k++)
        {
            c = text.charAt(k) - ' ';

            for (i = 0; i < 8; i++)
            {
                line = f_getCharacter(c, 2 * i);
                line1 = f_getCharacter(c, 2 * i + 1);

                for (j = 0; j < 8; j++)
                {
                    if (bitRead(line, j))
                    {
                        point(x0 + 8 * k + i, y0 + j, textColour);
                    }
                    else if (f_fontSolid)
                    {
                        point(x0 + 8 * k + i, y0 + j, backColour);
                    }
                    if (bitRead(line1, j))
                    {
                        point(x0 + 8 * k + i, y0 + 8 + j, textColour);
                    }
                    else if ((f_fontSolid) and (j < 4))
                    {
                        point(x0 + 8 * k + i, y0 + 8 + j, backColour);
                    }
                }
            }
        }
    }
#if (MAX_FONT_SIZE > 2)
    else if (f_fontSize == 2)
    {

        for (k = 0; k < text.length(); k++)
        {
            c = text.charAt(k) - ' ';

            for (i = 0; i < 12; i++)
            {
                line = f_getCharacter(c, 2 * i);
                line1 = f_getCharacter(c, 2 * i + 1);

                for (j = 0; j < 8; j++)
                {
                    if (bitRead(line, j))
                    {
                        point(x0 + 12 * k + i, y0 + j,    textColour);
                    }
                    else if (f_fontSolid)
                    {
                        point(x0 + 12 * k + i, y0 + j,    backColour);
                    }
                    if (bitRead(line1, j))
                    {
                        point(x0 + 12 * k + i, y0 + 8 + j, textColour);
                    }
                    else if (f_fontSolid)
                    {
                        point(x0 + 12 * k + i, y0 + 8 + j, backColour);
                    }
                }
            }
        }
    }
#if (MAX_FONT_SIZE > 3)
    else if (f_fontSize == 3)
    {
        for (k = 0; k < text.length(); k++)
        {
            c = text.charAt(k) - ' ';
            for (i = 0; i < 16; i++)
            {
                line  = f_getCharacter(c, 3 * i);
                line1 = f_getCharacter(c, 3 * i + 1);
                line2 = f_getCharacter(c, 3 * i + 2);
                for (j = 0; j < 8; j++)
                {
                    if (bitRead(line, j))
                    {
                        point(x0 + 16 * k + i, y0 + j,     textColour);
                    }
                    else if (f_fontSolid)
                    {
                        point(x0 + 16 * k + i, y0 + j,     backColour);
                    }
                    if (bitRead(line1, j))
                    {
                        point(x0 + 16 * k + i, y0 + 8 + j,  textColour);
                    }
                    else if (f_fontSolid)
                    {
                        point(x0 + 16 * k + i, y0 + 8 + j,  backColour);
                    }
                    if (bitRead(line2, j))
                    {
                        point(x0 + 16 * k + i, y0 + 16 + j, textColour);
                    }
                    else if (f_fontSolid)
                    {
                        point(x0 + 16 * k + i, y0 + 16 + j, backColour);
                    }
                }
            }
        }
    }
#endif // end MAX_FONT_SIZE > 3
#endif // end MAX_FONT_SIZE > 2
#endif // end MAX_FONT_SIZE > 1
#endif // end MAX_FONT_SIZE > 0
}
#endif // FONT_MODE

void hV_Screen_Buffer::drawText(int x, int y, int fontSize, String msg, uint16_t color) {
    setOrientation(7);
    if(fontSize == 1) selectFont(Font_Terminal6x8);
    else if(fontSize == 2) selectFont(Font_Terminal8x12);
    else if(fontSize == 3) selectFont(Font_Terminal12x16);
    else if(fontSize == 5) {
    uint8_t currentChar;
    uint16_t x_location = x;
    uint16_t y_location = y;
    for(int i = 0; i < msg.length(); i++) {
        currentChar = msg.charAt(i) - 32;
        x_location += i*34;
        partialScreenBitmap(x_location, y_location, largeTuffy[currentChar], 50, 32);
    }
    }
    else selectFont(Font_Terminal16x24);
    gText(x, y, msg, color);
}

void hV_Screen_Buffer::clearScreen() {
    clear(myColours.white);
    flush();
}